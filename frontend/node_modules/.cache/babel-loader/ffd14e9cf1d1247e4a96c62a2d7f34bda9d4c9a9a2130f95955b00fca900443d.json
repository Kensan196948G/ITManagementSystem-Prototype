{"ast":null,"code":"var _jsxFileName = \"F:\\\\kitting\\\\ITManagementSystem\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// 認証コンテキストの作成\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// 開発用のモックユーザーロール\nconst USER_ROLES = {\n  GLOBAL_ADMIN: 'グローバル管理者',\n  GENERAL_USER: '一般ユーザー',\n  GUEST: 'ゲスト'\n};\n\n// 開発用のモックユーザーデータ\nconst MOCK_USERS = {\n  'admin': {\n    id: '1',\n    first_name: '太郎',\n    last_name: '山田',\n    email: 'taro.yamada@example.com',\n    role: USER_ROLES.GLOBAL_ADMIN,\n    department: 'IT部門',\n    permissions: ['admin', 'read', 'write', 'api_management'],\n    avatar: 'https://i.pravatar.cc/150?img=1'\n  },\n  'user': {\n    id: '2',\n    first_name: '一郎',\n    last_name: '鈴木',\n    email: 'ichiro.suzuki@example.com',\n    role: USER_ROLES.GENERAL_USER,\n    department: 'IT部門',\n    permissions: ['read', 'write'],\n    avatar: 'https://i.pravatar.cc/150?img=2'\n  },\n  'guest': {\n    id: '3',\n    first_name: '次郎',\n    last_name: '佐藤',\n    email: 'jiro.sato@example.com',\n    role: USER_ROLES.GUEST,\n    department: '営業部',\n    permissions: ['read'],\n    avatar: 'https://i.pravatar.cc/150?img=3'\n  }\n};\n\n// 認証プロバイダーコンポーネント\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 開発モード: ユーザー認証状態の確認\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      const token = localStorage.getItem('token');\n      const userRole = localStorage.getItem('userRole');\n      if (token && userRole && MOCK_USERS[userRole]) {\n        try {\n          // 開発モード: モックユーザーデータをセット\n          setCurrentUser(MOCK_USERS[userRole]);\n        } catch (err) {\n          console.error('認証エラー:', err);\n          localStorage.removeItem('token');\n          localStorage.removeItem('userRole');\n          setCurrentUser(null);\n        }\n      }\n      setLoading(false);\n    };\n\n    // 1秒後に認証状態チェックを模擬（ロード中の表示確認用）\n    setTimeout(() => {\n      checkAuthStatus();\n    }, 1000);\n  }, []);\n\n  // Microsoft認証をシミュレートするログイン関数\n  const loginWithMicrosoft = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n\n      // 開発モード: Microsoft認証をシミュレート\n      const token = 'mock-ms-token-' + Math.random().toString(36).substring(2);\n\n      // デフォルトでは管理者アカウントでログイン\n      const userRole = 'admin';\n      localStorage.setItem('token', token);\n      localStorage.setItem('userRole', userRole);\n      setCurrentUser(MOCK_USERS[userRole]);\n      setLoading(false);\n      return true;\n    } catch (err) {\n      console.error('Microsoft認証エラー:', err);\n      setError('Microsoft認証に失敗しました。再度お試しください。');\n      setLoading(false);\n      return false;\n    }\n  };\n\n  // 通常ログイン関数\n  const login = async (username, password) => {\n    try {\n      setError(null);\n\n      // 開発モード: 簡易的な認証チェック\n      if (!username || !password) {\n        throw new Error('ユーザー名とパスワードを入力してください');\n      }\n      let userRole;\n\n      // ユーザー名によってロールを決定（開発用）\n      if (username === 'admin') {\n        userRole = 'admin'; // グローバル管理者\n      } else if (username === 'user') {\n        userRole = 'user'; // 一般ユーザー\n      } else if (username === 'guest') {\n        userRole = 'guest'; // ゲスト\n      } else {\n        // デフォルトは一般ユーザー\n        userRole = 'user';\n      }\n\n      // モックトークンとユーザー情報を設定\n      const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\n      localStorage.setItem('token', token);\n      localStorage.setItem('userRole', userRole);\n      setCurrentUser(MOCK_USERS[userRole]);\n      return true;\n    } catch (err) {\n      console.error('ログインエラー:', err);\n      setError(err.message || 'ログインに失敗しました。');\n      return false;\n    }\n  };\n\n  // ログアウト関数\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userRole');\n    setCurrentUser(null);\n    console.log('ログアウトしました');\n  };\n\n  // 権限チェック関数\n  const hasPermission = permission => {\n    if (!currentUser) return false;\n    return currentUser.permissions.includes(permission);\n  };\n\n  // 提供する値\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    loginWithMicrosoft,\n    logout,\n    hasPermission,\n    isAuthenticated: !!currentUser,\n    USER_ROLES // ロール定数をエクスポート\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 10\n  }, this);\n};\n\n// カスタムフック\n_s(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","USER_ROLES","GLOBAL_ADMIN","GENERAL_USER","GUEST","MOCK_USERS","id","first_name","last_name","email","role","department","permissions","avatar","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","checkAuthStatus","token","localStorage","getItem","userRole","err","console","removeItem","setTimeout","loginWithMicrosoft","Math","random","toString","substring","setItem","login","username","password","Error","message","logout","log","hasPermission","permission","includes","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["F:/kitting/ITManagementSystem/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// 認証コンテキストの作成\r\nconst AuthContext = createContext();\r\n\r\n// 開発用のモックユーザーロール\r\nconst USER_ROLES = {\r\n  GLOBAL_ADMIN: 'グローバル管理者',\r\n  GENERAL_USER: '一般ユーザー',\r\n  GUEST: 'ゲスト'\r\n};\r\n\r\n// 開発用のモックユーザーデータ\r\nconst MOCK_USERS = {\r\n  'admin': {\r\n    id: '1',\r\n    first_name: '太郎',\r\n    last_name: '山田',\r\n    email: 'taro.yamada@example.com',\r\n    role: USER_ROLES.GLOBAL_ADMIN,\r\n    department: 'IT部門',\r\n    permissions: ['admin', 'read', 'write', 'api_management'],\r\n    avatar: 'https://i.pravatar.cc/150?img=1'\r\n  },\r\n  'user': {\r\n    id: '2',\r\n    first_name: '一郎',\r\n    last_name: '鈴木',\r\n    email: 'ichiro.suzuki@example.com',\r\n    role: USER_ROLES.GENERAL_USER,\r\n    department: 'IT部門',\r\n    permissions: ['read', 'write'],\r\n    avatar: 'https://i.pravatar.cc/150?img=2'\r\n  },\r\n  'guest': {\r\n    id: '3',\r\n    first_name: '次郎',\r\n    last_name: '佐藤',\r\n    email: 'jiro.sato@example.com',\r\n    role: USER_ROLES.GUEST,\r\n    department: '営業部',\r\n    permissions: ['read'],\r\n    avatar: 'https://i.pravatar.cc/150?img=3'\r\n  }\r\n};\r\n\r\n// 認証プロバイダーコンポーネント\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 開発モード: ユーザー認証状態の確認\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const userRole = localStorage.getItem('userRole');\r\n      \r\n      if (token && userRole && MOCK_USERS[userRole]) {\r\n        try {\r\n          // 開発モード: モックユーザーデータをセット\r\n          setCurrentUser(MOCK_USERS[userRole]);\r\n        } catch (err) {\r\n          console.error('認証エラー:', err);\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userRole');\r\n          setCurrentUser(null);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    // 1秒後に認証状態チェックを模擬（ロード中の表示確認用）\r\n    setTimeout(() => {\r\n      checkAuthStatus();\r\n    }, 1000);\r\n  }, []);\r\n\r\n  // Microsoft認証をシミュレートするログイン関数\r\n  const loginWithMicrosoft = async () => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      \r\n      // 開発モード: Microsoft認証をシミュレート\r\n      const token = 'mock-ms-token-' + Math.random().toString(36).substring(2);\r\n      \r\n      // デフォルトでは管理者アカウントでログイン\r\n      const userRole = 'admin';\r\n      \r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('userRole', userRole);\r\n      setCurrentUser(MOCK_USERS[userRole]);\r\n      setLoading(false);\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error('Microsoft認証エラー:', err);\r\n      setError('Microsoft認証に失敗しました。再度お試しください。');\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 通常ログイン関数\r\n  const login = async (username, password) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // 開発モード: 簡易的な認証チェック\r\n      if (!username || !password) {\r\n        throw new Error('ユーザー名とパスワードを入力してください');\r\n      }\r\n      \r\n      let userRole;\r\n      \r\n      // ユーザー名によってロールを決定（開発用）\r\n      if (username === 'admin') {\r\n        userRole = 'admin'; // グローバル管理者\r\n      } else if (username === 'user') {\r\n        userRole = 'user'; // 一般ユーザー\r\n      } else if (username === 'guest') {\r\n        userRole = 'guest'; // ゲスト\r\n      } else {\r\n        // デフォルトは一般ユーザー\r\n        userRole = 'user';\r\n      }\r\n      \r\n      // モックトークンとユーザー情報を設定\r\n      const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('userRole', userRole);\r\n      setCurrentUser(MOCK_USERS[userRole]);\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error('ログインエラー:', err);\r\n      setError(err.message || 'ログインに失敗しました。');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // ログアウト関数\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userRole');\r\n    setCurrentUser(null);\r\n    console.log('ログアウトしました');\r\n  };\r\n\r\n  // 権限チェック関数\r\n  const hasPermission = (permission) => {\r\n    if (!currentUser) return false;\r\n    return currentUser.permissions.includes(permission);\r\n  };\r\n\r\n  // 提供する値\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    login,\r\n    loginWithMicrosoft,\r\n    logout,\r\n    hasPermission,\r\n    isAuthenticated: !!currentUser,\r\n    USER_ROLES // ロール定数をエクスポート\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// カスタムフック\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}