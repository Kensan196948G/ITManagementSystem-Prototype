{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';// 認証コンテキストの作成\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// 開発用のモックユーザーロール\nconst USER_ROLES={GLOBAL_ADMIN:'グローバル管理者',GENERAL_USER:'一般ユーザー',GUEST:'ゲスト'};// 開発用のモックユーザーデータ\nconst MOCK_USERS={'admin':{id:'1',first_name:'太郎',last_name:'山田',email:'taro.yamada@example.com',role:USER_ROLES.GLOBAL_ADMIN,department:'IT部門',permissions:['admin','read','write','api_management'],avatar:'https://i.pravatar.cc/150?img=1'},'user':{id:'2',first_name:'一郎',last_name:'鈴木',email:'ichiro.suzuki@example.com',role:USER_ROLES.GENERAL_USER,department:'IT部門',permissions:['read','write'],avatar:'https://i.pravatar.cc/150?img=2'},'guest':{id:'3',first_name:'次郎',last_name:'佐藤',email:'jiro.sato@example.com',role:USER_ROLES.GUEST,department:'営業部',permissions:['read'],avatar:'https://i.pravatar.cc/150?img=3'}};// 認証プロバイダーコンポーネント\nexport const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// 開発モード: ユーザー認証状態の確認\nuseEffect(()=>{const checkAuthStatus=async()=>{const token=localStorage.getItem('token');const userRole=localStorage.getItem('userRole');if(token&&userRole&&MOCK_USERS[userRole]){try{// 開発モード: モックユーザーデータをセット\nsetCurrentUser(MOCK_USERS[userRole]);}catch(err){console.error('認証エラー:',err);localStorage.removeItem('token');localStorage.removeItem('userRole');setCurrentUser(null);}}setLoading(false);};// 1秒後に認証状態チェックを模擬（ロード中の表示確認用）\nsetTimeout(()=>{checkAuthStatus();},1000);},[]);// Microsoft認証処理関数\nconst loginWithMicrosoft=async msUserData=>{try{setError(null);setLoading(true);// Microsoft Graph API からのレスポンスを扱う場合\nif(msUserData&&msUserData.account){var _msUserData$account$h;console.log('Microsoft認証成功 - 実際のユーザーデータ:',msUserData);// Microsoft ADからのユーザー情報を処理\nconst msUser={id:msUserData.account.homeAccountId||'ms-user',first_name:msUserData.account.name?msUserData.account.name.split(' ')[0]:'名前なし',last_name:msUserData.account.name?msUserData.account.name.split(' ')[1]||'':'',email:msUserData.account.username||'unknown@example.com',// MSユーザーのロールは固定または別途APIから取得する\nrole:USER_ROLES.GENERAL_USER,department:msUserData.account.department||'未設定',permissions:['read','write'],avatar:null,// Microsoft独自の情報を保存\nmicrosoftInfo:{displayName:msUserData.account.name||'Microsoft User',userPrincipalName:msUserData.account.username,tenantId:((_msUserData$account$h=msUserData.account.homeAccountId)===null||_msUserData$account$h===void 0?void 0:_msUserData$account$h.split('.')[1])||'',accountType:msUserData.account.environment||'Azure AD'// その他のMicrosoft固有情報\n}};// トークン保存\nconst token=msUserData.accessToken||'ms-token-'+Math.random().toString(36).substring(2);localStorage.setItem('token',token);localStorage.setItem('userRole','msuser');// Microsoftユーザーのマーカー\nlocalStorage.setItem('msUserInfo',JSON.stringify({displayName:msUser.microsoftInfo.displayName,userPrincipalName:msUser.microsoftInfo.userPrincipalName,accountType:msUser.microsoftInfo.accountType}));setCurrentUser(msUser);setLoading(false);return true;}else{console.log('Microsoft認証をモックモードで実行中...');// モック認証: Microsoft認証情報がない場合\nawait new Promise(resolve=>setTimeout(resolve,1000));// 1秒遅延で認証を模擬\n// Microsoft ADユーザーを模擬\n// ログイン時のメールアドレスから名前生成（実際の環境ではGraph APIから取得）\nconst loginEmail='microsoft.login@contoso.com';// 実際の環境では認証時に使用したメールアドレス\nconst nameParts=loginEmail.split('@')[0].split('.');const firstName=nameParts.length>1?nameParts[1]:nameParts[0];const lastName=nameParts.length>1?nameParts[0]:'';// メールアドレスから推測したフルネーム（姓名）\nconst fullName=lastName&&firstName?`${lastName} ${firstName}`:firstName;const mockMsUser={id:'ms-user-123',first_name:firstName,last_name:lastName,email:loginEmail,role:USER_ROLES.GENERAL_USER,department:'自動取得部署',permissions:['read','write'],avatar:null,// Microsoft独自の情報\nmicrosoftInfo:{// 実際のMicrosoft Entra IDから取得される情報（ここではメールからの推測）\ndisplayName:fullName,// 表示名（Microsoft Graph APIのdisplayName）\nuserPrincipalName:loginEmail,// UPN（ログインに使用されたメールアドレス）\ntenantId:'a7232f7a-a9e5-4f71-9372-dc8b1c6645ea',accountType:'Microsoft Entra ID'}};const token='mock-ms-token-'+Math.random().toString(36).substring(2);localStorage.setItem('token',token);localStorage.setItem('userRole','msuser');localStorage.setItem('msUserInfo',JSON.stringify({displayName:mockMsUser.microsoftInfo.displayName,userPrincipalName:mockMsUser.microsoftInfo.userPrincipalName,accountType:mockMsUser.microsoftInfo.accountType}));setCurrentUser(mockMsUser);setLoading(false);console.log('Microsoft認証成功（モックモード）');return true;}}catch(err){console.error('Microsoft認証エラー:',err);setError('Microsoft認証に失敗しました。再度お試しください。');setLoading(false);return false;}};// 通常ログイン関数\nconst login=async(username,password)=>{try{setError(null);// ログイン試行をコンソールに出力（デバッグ用）\nconsole.log(`ログイン試行: username=${username}, password=${password}`);// 入力チェック\nif(!username||!password){console.error('入力エラー: ユーザー名またはパスワードが入力されていません');throw new Error('ユーザー名とパスワードを入力してください');}// テスト用アカウントの検証\nlet userRole=null;// 厳密な比較で検証\nif(username==='admin'&&password==='admin'){console.log('管理者アカウントでのログイン成功');userRole='admin';// グローバル管理者\n}else if(username==='user'&&password==='user'){console.log('一般ユーザーアカウントでのログイン成功');userRole='user';// 一般ユーザー\n}else if(username==='guest'&&password==='guest'){console.log('ゲストアカウントでのログイン成功');userRole='guest';// ゲスト\n}else{console.error(`ログイン認証失敗: ユーザー ${username} は認証されませんでした`);throw new Error('ユーザー名またはパスワードが正しくありません');}// モックトークンとユーザー情報を設定\nconst token='mock-jwt-token-'+Math.random().toString(36).substring(2);localStorage.setItem('token',token);localStorage.setItem('userRole',userRole);// ユーザー情報を設定\nconsole.log(`ユーザー情報設定: ${userRole}`,MOCK_USERS[userRole]);setCurrentUser(MOCK_USERS[userRole]);console.log(`ログイン成功: ${username} (${userRole}) - トークン: ${token}`);return true;}catch(err){console.error('ログインエラー:',err);setError(err.message||'ログインに失敗しました。');return false;}};// ログアウト関数\nconst logout=()=>{localStorage.removeItem('token');localStorage.removeItem('userRole');setCurrentUser(null);console.log('ログアウトしました');};// 権限チェック関数\nconst hasPermission=permission=>{if(!currentUser)return false;return currentUser.permissions.includes(permission);};// 提供する値\nconst value={currentUser,loading,error,login,loginWithMicrosoft,logout,hasPermission,isAuthenticated:!!currentUser,USER_ROLES// ロール定数をエクスポート\n};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// カスタムフック\nexport const useAuth=()=>{return useContext(AuthContext);};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","AuthContext","USER_ROLES","GLOBAL_ADMIN","GENERAL_USER","GUEST","MOCK_USERS","id","first_name","last_name","email","role","department","permissions","avatar","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","error","setError","checkAuthStatus","token","localStorage","getItem","userRole","err","console","removeItem","setTimeout","loginWithMicrosoft","msUserData","account","_msUserData$account$h","log","msUser","homeAccountId","name","split","username","microsoftInfo","displayName","userPrincipalName","tenantId","accountType","environment","accessToken","Math","random","toString","substring","setItem","JSON","stringify","Promise","resolve","loginEmail","nameParts","firstName","length","lastName","fullName","mockMsUser","login","password","Error","message","logout","hasPermission","permission","includes","value","isAuthenticated","Provider","useAuth"],"sources":["F:/kitting/ITManagementSystem/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// 認証コンテキストの作成\r\nconst AuthContext = createContext();\r\n\r\n// 開発用のモックユーザーロール\r\nconst USER_ROLES = {\r\n  GLOBAL_ADMIN: 'グローバル管理者',\r\n  GENERAL_USER: '一般ユーザー',\r\n  GUEST: 'ゲスト'\r\n};\r\n\r\n// 開発用のモックユーザーデータ\r\nconst MOCK_USERS = {\r\n  'admin': {\r\n    id: '1',\r\n    first_name: '太郎',\r\n    last_name: '山田',\r\n    email: 'taro.yamada@example.com',\r\n    role: USER_ROLES.GLOBAL_ADMIN,\r\n    department: 'IT部門',\r\n    permissions: ['admin', 'read', 'write', 'api_management'],\r\n    avatar: 'https://i.pravatar.cc/150?img=1'\r\n  },\r\n  'user': {\r\n    id: '2',\r\n    first_name: '一郎',\r\n    last_name: '鈴木',\r\n    email: 'ichiro.suzuki@example.com',\r\n    role: USER_ROLES.GENERAL_USER,\r\n    department: 'IT部門',\r\n    permissions: ['read', 'write'],\r\n    avatar: 'https://i.pravatar.cc/150?img=2'\r\n  },\r\n  'guest': {\r\n    id: '3',\r\n    first_name: '次郎',\r\n    last_name: '佐藤',\r\n    email: 'jiro.sato@example.com',\r\n    role: USER_ROLES.GUEST,\r\n    department: '営業部',\r\n    permissions: ['read'],\r\n    avatar: 'https://i.pravatar.cc/150?img=3'\r\n  }\r\n};\r\n\r\n// 認証プロバイダーコンポーネント\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 開発モード: ユーザー認証状態の確認\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const userRole = localStorage.getItem('userRole');\r\n      \r\n      if (token && userRole && MOCK_USERS[userRole]) {\r\n        try {\r\n          // 開発モード: モックユーザーデータをセット\r\n          setCurrentUser(MOCK_USERS[userRole]);\r\n        } catch (err) {\r\n          console.error('認証エラー:', err);\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userRole');\r\n          setCurrentUser(null);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    // 1秒後に認証状態チェックを模擬（ロード中の表示確認用）\r\n    setTimeout(() => {\r\n      checkAuthStatus();\r\n    }, 1000);\r\n  }, []);\r\n\r\n  // Microsoft認証処理関数\r\n  const loginWithMicrosoft = async (msUserData) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      \r\n      // Microsoft Graph API からのレスポンスを扱う場合\r\n      if (msUserData && msUserData.account) {\r\n        console.log('Microsoft認証成功 - 実際のユーザーデータ:', msUserData);\r\n        \r\n        // Microsoft ADからのユーザー情報を処理\r\n        const msUser = {\r\n          id: msUserData.account.homeAccountId || 'ms-user',\r\n          first_name: msUserData.account.name ? msUserData.account.name.split(' ')[0] : '名前なし',\r\n          last_name: msUserData.account.name ? msUserData.account.name.split(' ')[1] || '' : '',\r\n          email: msUserData.account.username || 'unknown@example.com',\r\n          // MSユーザーのロールは固定または別途APIから取得する\r\n          role: USER_ROLES.GENERAL_USER,\r\n          department: msUserData.account.department || '未設定',\r\n          permissions: ['read', 'write'],\r\n          avatar: null,\r\n          // Microsoft独自の情報を保存\r\n          microsoftInfo: {\r\n            displayName: msUserData.account.name || 'Microsoft User',\r\n            userPrincipalName: msUserData.account.username,\r\n            tenantId: msUserData.account.homeAccountId?.split('.')[1] || '',\r\n            accountType: msUserData.account.environment || 'Azure AD',\r\n            // その他のMicrosoft固有情報\r\n          }\r\n        };\r\n        \r\n        // トークン保存\r\n        const token = msUserData.accessToken || ('ms-token-' + Math.random().toString(36).substring(2));\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('userRole', 'msuser');  // Microsoftユーザーのマーカー\r\n        localStorage.setItem('msUserInfo', JSON.stringify({\r\n          displayName: msUser.microsoftInfo.displayName,\r\n          userPrincipalName: msUser.microsoftInfo.userPrincipalName,\r\n          accountType: msUser.microsoftInfo.accountType\r\n        }));\r\n        \r\n        setCurrentUser(msUser);\r\n        setLoading(false);\r\n        return true;\r\n      } else {\r\n        console.log('Microsoft認証をモックモードで実行中...');\r\n        \r\n        // モック認証: Microsoft認証情報がない場合\r\n        await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒遅延で認証を模擬\r\n        \r\n        // Microsoft ADユーザーを模擬\r\n        // ログイン時のメールアドレスから名前生成（実際の環境ではGraph APIから取得）\r\n        const loginEmail = 'microsoft.login@contoso.com'; // 実際の環境では認証時に使用したメールアドレス\r\n        const nameParts = loginEmail.split('@')[0].split('.');\r\n        const firstName = nameParts.length > 1 ? nameParts[1] : nameParts[0];\r\n        const lastName = nameParts.length > 1 ? nameParts[0] : '';\r\n        \r\n        // メールアドレスから推測したフルネーム（姓名）\r\n        const fullName = lastName && firstName \r\n          ? `${lastName} ${firstName}` \r\n          : firstName;\r\n          \r\n        const mockMsUser = {\r\n          id: 'ms-user-123',\r\n          first_name: firstName,\r\n          last_name: lastName,\r\n          email: loginEmail,\r\n          role: USER_ROLES.GENERAL_USER,\r\n          department: '自動取得部署',\r\n          permissions: ['read', 'write'],\r\n          avatar: null,\r\n          // Microsoft独自の情報\r\n          microsoftInfo: {\r\n            // 実際のMicrosoft Entra IDから取得される情報（ここではメールからの推測）\r\n            displayName: fullName,      // 表示名（Microsoft Graph APIのdisplayName）\r\n            userPrincipalName: loginEmail, // UPN（ログインに使用されたメールアドレス）\r\n            tenantId: 'a7232f7a-a9e5-4f71-9372-dc8b1c6645ea',\r\n            accountType: 'Microsoft Entra ID',\r\n          }\r\n        };\r\n        \r\n        const token = 'mock-ms-token-' + Math.random().toString(36).substring(2);\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('userRole', 'msuser');\r\n        localStorage.setItem('msUserInfo', JSON.stringify({\r\n          displayName: mockMsUser.microsoftInfo.displayName,\r\n          userPrincipalName: mockMsUser.microsoftInfo.userPrincipalName,\r\n          accountType: mockMsUser.microsoftInfo.accountType\r\n        }));\r\n        \r\n        setCurrentUser(mockMsUser);\r\n        setLoading(false);\r\n        \r\n        console.log('Microsoft認証成功（モックモード）');\r\n        return true;\r\n      }\r\n    } catch (err) {\r\n      console.error('Microsoft認証エラー:', err);\r\n      setError('Microsoft認証に失敗しました。再度お試しください。');\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 通常ログイン関数\r\n  const login = async (username, password) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // ログイン試行をコンソールに出力（デバッグ用）\r\n      console.log(`ログイン試行: username=${username}, password=${password}`);\r\n      \r\n      // 入力チェック\r\n      if (!username || !password) {\r\n        console.error('入力エラー: ユーザー名またはパスワードが入力されていません');\r\n        throw new Error('ユーザー名とパスワードを入力してください');\r\n      }\r\n      \r\n      // テスト用アカウントの検証\r\n      let userRole = null;\r\n      \r\n      // 厳密な比較で検証\r\n      if (username === 'admin' && password === 'admin') {\r\n        console.log('管理者アカウントでのログイン成功');\r\n        userRole = 'admin'; // グローバル管理者\r\n      } else if (username === 'user' && password === 'user') {\r\n        console.log('一般ユーザーアカウントでのログイン成功');\r\n        userRole = 'user'; // 一般ユーザー\r\n      } else if (username === 'guest' && password === 'guest') {\r\n        console.log('ゲストアカウントでのログイン成功');\r\n        userRole = 'guest'; // ゲスト\r\n      } else {\r\n        console.error(`ログイン認証失敗: ユーザー ${username} は認証されませんでした`);\r\n        throw new Error('ユーザー名またはパスワードが正しくありません');\r\n      }\r\n      \r\n      // モックトークンとユーザー情報を設定\r\n      const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('userRole', userRole);\r\n      \r\n      // ユーザー情報を設定\r\n      console.log(`ユーザー情報設定: ${userRole}`, MOCK_USERS[userRole]);\r\n      setCurrentUser(MOCK_USERS[userRole]);\r\n      \r\n      console.log(`ログイン成功: ${username} (${userRole}) - トークン: ${token}`);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('ログインエラー:', err);\r\n      setError(err.message || 'ログインに失敗しました。');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // ログアウト関数\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userRole');\r\n    setCurrentUser(null);\r\n    console.log('ログアウトしました');\r\n  };\r\n\r\n  // 権限チェック関数\r\n  const hasPermission = (permission) => {\r\n    if (!currentUser) return false;\r\n    return currentUser.permissions.includes(permission);\r\n  };\r\n\r\n  // 提供する値\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    login,\r\n    loginWithMicrosoft,\r\n    logout,\r\n    hasPermission,\r\n    isAuthenticated: !!currentUser,\r\n    USER_ROLES // ロール定数をエクスポート\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// カスタムフック\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}