{"ast":null,"code":"var _jsxFileName = \"F:\\\\kitting\\\\ITManagementSystem\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// 認証コンテキストの作成\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// 開発用のモックユーザーロール\nconst USER_ROLES = {\n  GLOBAL_ADMIN: 'グローバル管理者',\n  GENERAL_USER: '一般ユーザー',\n  GUEST: 'ゲスト'\n};\n\n// 開発用のモックユーザーデータ\nconst MOCK_USERS = {\n  'admin': {\n    id: '1',\n    first_name: '太郎',\n    last_name: '山田',\n    email: 'taro.yamada@example.com',\n    role: USER_ROLES.GLOBAL_ADMIN,\n    department: 'IT部門',\n    permissions: ['admin', 'read', 'write', 'api_management'],\n    avatar: 'https://i.pravatar.cc/150?img=1'\n  },\n  'user': {\n    id: '2',\n    first_name: '一郎',\n    last_name: '鈴木',\n    email: 'ichiro.suzuki@example.com',\n    role: USER_ROLES.GENERAL_USER,\n    department: 'IT部門',\n    permissions: ['read', 'write'],\n    avatar: 'https://i.pravatar.cc/150?img=2'\n  },\n  'guest': {\n    id: '3',\n    first_name: '次郎',\n    last_name: '佐藤',\n    email: 'jiro.sato@example.com',\n    role: USER_ROLES.GUEST,\n    department: '営業部',\n    permissions: ['read'],\n    avatar: 'https://i.pravatar.cc/150?img=3'\n  }\n};\n\n// 認証プロバイダーコンポーネント\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 開発モード: ユーザー認証状態の確認\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      // 開発モードフラグ - バックエンドが動作しない環境でのテスト用\n      const DEV_MODE = true;\n\n      // 開発モードで、かつMSユーザー情報がある場合はモックデータを設定\n      const msUserInfo = localStorage.getItem('msUserInfo');\n      if (DEV_MODE && msUserInfo) {\n        try {\n          var _userInfo$displayName, _userInfo$displayName2;\n          const userInfo = JSON.parse(msUserInfo);\n\n          // Microsoft ADユーザーのモックデータを作成\n          const mockMsUser = {\n            id: 'ms-dev-user',\n            first_name: ((_userInfo$displayName = userInfo.displayName) === null || _userInfo$displayName === void 0 ? void 0 : _userInfo$displayName.split(' ')[0]) || '太郎',\n            last_name: ((_userInfo$displayName2 = userInfo.displayName) === null || _userInfo$displayName2 === void 0 ? void 0 : _userInfo$displayName2.split(' ')[1]) || '山田',\n            email: userInfo.userPrincipalName || 'dev@example.com',\n            role: USER_ROLES.GENERAL_USER,\n            department: '開発部門',\n            permissions: ['read', 'write', 'api_access'],\n            microsoftInfo: userInfo\n          };\n          console.log('開発モード: Microsoftユーザー情報をセット', mockMsUser);\n          setCurrentUser(mockMsUser);\n          setLoading(false);\n          return;\n        } catch (err) {\n          console.error('開発モードユーザー設定エラー:', err);\n        }\n      }\n\n      // 通常の認証チェック（開発モードでない場合、またはMSユーザー情報がない場合）\n      const token = localStorage.getItem('token');\n      const userRole = localStorage.getItem('userRole');\n      if (token && userRole) {\n        try {\n          if (MOCK_USERS[userRole]) {\n            // モックユーザーデータをセット\n            setCurrentUser(MOCK_USERS[userRole]);\n          } else if (userRole === 'msuser') {\n            // MSユーザーだが詳細情報がない場合\n            const mockMsUser = {\n              id: 'ms-user-default',\n              first_name: '太郎',\n              last_name: '山田',\n              email: 'taro.yamada@example.com',\n              role: USER_ROLES.GENERAL_USER,\n              permissions: ['read', 'write'],\n              microsoftInfo: {\n                displayName: '山田 太郎',\n                userPrincipalName: 'taro.yamada@example.com',\n                accountType: 'Microsoft Entra ID'\n              }\n            };\n            setCurrentUser(mockMsUser);\n          }\n        } catch (err) {\n          console.error('認証エラー:', err);\n          localStorage.removeItem('token');\n          localStorage.removeItem('userRole');\n          setCurrentUser(null);\n        }\n      } else if (DEV_MODE) {\n        // 開発モードでユーザー情報がない場合は、デフォルトユーザーを設定\n        const defaultUser = {\n          id: 'dev-user',\n          first_name: '開発',\n          last_name: 'ユーザー',\n          email: 'dev@example.com',\n          role: USER_ROLES.GENERAL_USER,\n          department: '開発部門',\n          permissions: ['read', 'write', 'api_access'],\n          microsoftInfo: {\n            displayName: '開発 ユーザー',\n            userPrincipalName: 'dev@example.com',\n            accountType: 'Development'\n          }\n        };\n        console.log('開発モード: デフォルトユーザーを設定', defaultUser);\n        setCurrentUser(defaultUser);\n      }\n      setLoading(false);\n    };\n\n    // 認証状態チェックを即時実行（開発モードではすぐに認証完了状態にする）\n    checkAuthStatus();\n  }, []);\n\n  // Microsoft認証処理関数\n  const loginWithMicrosoft = async msUserData => {\n    try {\n      setError(null);\n      setLoading(true);\n\n      // Microsoft Graph API からのレスポンスを扱う場合\n      if (msUserData && msUserData.account) {\n        var _msUserData$account$h;\n        console.log('Microsoft認証成功 - 実際のユーザーデータ:', msUserData);\n\n        // Microsoft ADからのユーザー情報を処理\n        const msUser = {\n          id: msUserData.account.homeAccountId || 'ms-user',\n          first_name: msUserData.account.name ? msUserData.account.name.split(' ')[0] : '名前なし',\n          last_name: msUserData.account.name ? msUserData.account.name.split(' ')[1] || '' : '',\n          email: msUserData.account.username || 'unknown@example.com',\n          // MSユーザーのロールは固定または別途APIから取得する\n          role: USER_ROLES.GENERAL_USER,\n          department: msUserData.account.department || '未設定',\n          permissions: ['read', 'write'],\n          avatar: null,\n          // Microsoft独自の情報を保存\n          microsoftInfo: {\n            displayName: msUserData.account.name || 'Microsoft User',\n            userPrincipalName: msUserData.account.username,\n            tenantId: ((_msUserData$account$h = msUserData.account.homeAccountId) === null || _msUserData$account$h === void 0 ? void 0 : _msUserData$account$h.split('.')[1]) || '',\n            accountType: msUserData.account.environment || 'Azure AD'\n            // その他のMicrosoft固有情報\n          }\n        };\n\n        // トークン保存\n        const token = msUserData.accessToken || 'ms-token-' + Math.random().toString(36).substring(2);\n        localStorage.setItem('token', token);\n        localStorage.setItem('userRole', 'msuser'); // Microsoftユーザーのマーカー\n        localStorage.setItem('msUserInfo', JSON.stringify({\n          displayName: msUser.microsoftInfo.displayName,\n          userPrincipalName: msUser.microsoftInfo.userPrincipalName,\n          accountType: msUser.microsoftInfo.accountType\n        }));\n        setCurrentUser(msUser);\n        setLoading(false);\n        return true;\n      } else {\n        console.log('Microsoft認証をモックモードで実行中...');\n\n        // モック認証: Microsoft認証情報がない場合\n        await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒遅延で認証を模擬\n\n        // Microsoft ADユーザーを模擬\n        // ログイン時のメールアドレスから名前生成（実際の環境ではGraph APIから取得）\n        const loginEmail = 'microsoft.login@contoso.com'; // 実際の環境では認証時に使用したメールアドレス\n        const nameParts = loginEmail.split('@')[0].split('.');\n        const firstName = nameParts.length > 1 ? nameParts[1] : nameParts[0];\n        const lastName = nameParts.length > 1 ? nameParts[0] : '';\n\n        // メールアドレスから推測したフルネーム（姓名）\n        const fullName = lastName && firstName ? `${lastName} ${firstName}` : firstName;\n        const mockMsUser = {\n          id: 'ms-user-123',\n          first_name: firstName,\n          last_name: lastName,\n          email: loginEmail,\n          role: USER_ROLES.GENERAL_USER,\n          department: '自動取得部署',\n          permissions: ['read', 'write'],\n          avatar: null,\n          // Microsoft独自の情報\n          microsoftInfo: {\n            // 実際のMicrosoft Entra IDから取得される情報（ここではメールからの推測）\n            displayName: fullName,\n            // 表示名（Microsoft Graph APIのdisplayName）\n            userPrincipalName: loginEmail,\n            // UPN（ログインに使用されたメールアドレス）\n            tenantId: 'a7232f7a-a9e5-4f71-9372-dc8b1c6645ea',\n            accountType: 'Microsoft Entra ID'\n          }\n        };\n        const token = 'mock-ms-token-' + Math.random().toString(36).substring(2);\n        localStorage.setItem('token', token);\n        localStorage.setItem('userRole', 'msuser');\n        localStorage.setItem('msUserInfo', JSON.stringify({\n          displayName: mockMsUser.microsoftInfo.displayName,\n          userPrincipalName: mockMsUser.microsoftInfo.userPrincipalName,\n          accountType: mockMsUser.microsoftInfo.accountType\n        }));\n        setCurrentUser(mockMsUser);\n        setLoading(false);\n        console.log('Microsoft認証成功（モックモード）');\n        return true;\n      }\n    } catch (err) {\n      console.error('Microsoft認証エラー:', err);\n      setError('Microsoft認証に失敗しました。再度お試しください。');\n      setLoading(false);\n      return false;\n    }\n  };\n\n  // 通常ログイン関数\n  const login = async (username, password) => {\n    try {\n      setError(null);\n\n      // ログイン試行をコンソールに出力（デバッグ用）\n      console.log(`ログイン試行: username=${username}, password=${password}`);\n\n      // 入力チェック\n      if (!username || !password) {\n        console.error('入力エラー: ユーザー名またはパスワードが入力されていません');\n        throw new Error('ユーザー名とパスワードを入力してください');\n      }\n\n      // テスト用アカウントの検証\n      let userRole = null;\n\n      // 厳密な比較で検証\n      if (username === 'admin' && password === 'admin') {\n        console.log('管理者アカウントでのログイン成功');\n        userRole = 'admin'; // グローバル管理者\n      } else if (username === 'user' && password === 'user') {\n        console.log('一般ユーザーアカウントでのログイン成功');\n        userRole = 'user'; // 一般ユーザー\n      } else if (username === 'guest' && password === 'guest') {\n        console.log('ゲストアカウントでのログイン成功');\n        userRole = 'guest'; // ゲスト\n      } else {\n        console.error(`ログイン認証失敗: ユーザー ${username} は認証されませんでした`);\n        throw new Error('ユーザー名またはパスワードが正しくありません');\n      }\n\n      // モックトークンとユーザー情報を設定\n      const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\n      localStorage.setItem('token', token);\n      localStorage.setItem('userRole', userRole);\n\n      // ユーザー情報を設定\n      console.log(`ユーザー情報設定: ${userRole}`, MOCK_USERS[userRole]);\n      setCurrentUser(MOCK_USERS[userRole]);\n      console.log(`ログイン成功: ${username} (${userRole}) - トークン: ${token}`);\n      return true;\n    } catch (err) {\n      console.error('ログインエラー:', err);\n      setError(err.message || 'ログインに失敗しました。');\n      return false;\n    }\n  };\n\n  // ログアウト関数\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userRole');\n    setCurrentUser(null);\n    console.log('ログアウトしました');\n  };\n\n  // 権限チェック関数\n  const hasPermission = permission => {\n    if (!currentUser) return false;\n    return currentUser.permissions.includes(permission);\n  };\n\n  // 提供する値\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    loginWithMicrosoft,\n    logout,\n    hasPermission,\n    isAuthenticated: !!currentUser,\n    USER_ROLES // ロール定数をエクスポート\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 10\n  }, this);\n};\n\n// カスタムフック\n_s(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","USER_ROLES","GLOBAL_ADMIN","GENERAL_USER","GUEST","MOCK_USERS","id","first_name","last_name","email","role","department","permissions","avatar","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","checkAuthStatus","DEV_MODE","msUserInfo","localStorage","getItem","_userInfo$displayName","_userInfo$displayName2","userInfo","JSON","parse","mockMsUser","displayName","split","userPrincipalName","microsoftInfo","console","log","err","token","userRole","accountType","removeItem","defaultUser","loginWithMicrosoft","msUserData","account","_msUserData$account$h","msUser","homeAccountId","name","username","tenantId","environment","accessToken","Math","random","toString","substring","setItem","stringify","Promise","resolve","setTimeout","loginEmail","nameParts","firstName","length","lastName","fullName","login","password","Error","message","logout","hasPermission","permission","includes","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["F:/kitting/ITManagementSystem/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// 認証コンテキストの作成\r\nconst AuthContext = createContext();\r\n\r\n// 開発用のモックユーザーロール\r\nconst USER_ROLES = {\r\n  GLOBAL_ADMIN: 'グローバル管理者',\r\n  GENERAL_USER: '一般ユーザー',\r\n  GUEST: 'ゲスト'\r\n};\r\n\r\n// 開発用のモックユーザーデータ\r\nconst MOCK_USERS = {\r\n  'admin': {\r\n    id: '1',\r\n    first_name: '太郎',\r\n    last_name: '山田',\r\n    email: 'taro.yamada@example.com',\r\n    role: USER_ROLES.GLOBAL_ADMIN,\r\n    department: 'IT部門',\r\n    permissions: ['admin', 'read', 'write', 'api_management'],\r\n    avatar: 'https://i.pravatar.cc/150?img=1'\r\n  },\r\n  'user': {\r\n    id: '2',\r\n    first_name: '一郎',\r\n    last_name: '鈴木',\r\n    email: 'ichiro.suzuki@example.com',\r\n    role: USER_ROLES.GENERAL_USER,\r\n    department: 'IT部門',\r\n    permissions: ['read', 'write'],\r\n    avatar: 'https://i.pravatar.cc/150?img=2'\r\n  },\r\n  'guest': {\r\n    id: '3',\r\n    first_name: '次郎',\r\n    last_name: '佐藤',\r\n    email: 'jiro.sato@example.com',\r\n    role: USER_ROLES.GUEST,\r\n    department: '営業部',\r\n    permissions: ['read'],\r\n    avatar: 'https://i.pravatar.cc/150?img=3'\r\n  }\r\n};\r\n\r\n// 認証プロバイダーコンポーネント\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 開発モード: ユーザー認証状態の確認\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      // 開発モードフラグ - バックエンドが動作しない環境でのテスト用\r\n      const DEV_MODE = true;\r\n      \r\n      // 開発モードで、かつMSユーザー情報がある場合はモックデータを設定\r\n      const msUserInfo = localStorage.getItem('msUserInfo');\r\n      if (DEV_MODE && msUserInfo) {\r\n        try {\r\n          const userInfo = JSON.parse(msUserInfo);\r\n          \r\n          // Microsoft ADユーザーのモックデータを作成\r\n          const mockMsUser = {\r\n            id: 'ms-dev-user',\r\n            first_name: userInfo.displayName?.split(' ')[0] || '太郎',\r\n            last_name: userInfo.displayName?.split(' ')[1] || '山田',\r\n            email: userInfo.userPrincipalName || 'dev@example.com',\r\n            role: USER_ROLES.GENERAL_USER,\r\n            department: '開発部門',\r\n            permissions: ['read', 'write', 'api_access'],\r\n            microsoftInfo: userInfo\r\n          };\r\n          \r\n          console.log('開発モード: Microsoftユーザー情報をセット', mockMsUser);\r\n          setCurrentUser(mockMsUser);\r\n          setLoading(false);\r\n          return;\r\n        } catch (err) {\r\n          console.error('開発モードユーザー設定エラー:', err);\r\n        }\r\n      }\r\n      \r\n      // 通常の認証チェック（開発モードでない場合、またはMSユーザー情報がない場合）\r\n      const token = localStorage.getItem('token');\r\n      const userRole = localStorage.getItem('userRole');\r\n      \r\n      if (token && userRole) {\r\n        try {\r\n          if (MOCK_USERS[userRole]) {\r\n            // モックユーザーデータをセット\r\n            setCurrentUser(MOCK_USERS[userRole]);\r\n          } else if (userRole === 'msuser') {\r\n            // MSユーザーだが詳細情報がない場合\r\n            const mockMsUser = {\r\n              id: 'ms-user-default',\r\n              first_name: '太郎',\r\n              last_name: '山田',\r\n              email: 'taro.yamada@example.com',\r\n              role: USER_ROLES.GENERAL_USER,\r\n              permissions: ['read', 'write'],\r\n              microsoftInfo: {\r\n                displayName: '山田 太郎',\r\n                userPrincipalName: 'taro.yamada@example.com',\r\n                accountType: 'Microsoft Entra ID'\r\n              }\r\n            };\r\n            setCurrentUser(mockMsUser);\r\n          }\r\n        } catch (err) {\r\n          console.error('認証エラー:', err);\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userRole');\r\n          setCurrentUser(null);\r\n        }\r\n      } else if (DEV_MODE) {\r\n        // 開発モードでユーザー情報がない場合は、デフォルトユーザーを設定\r\n        const defaultUser = {\r\n          id: 'dev-user',\r\n          first_name: '開発',\r\n          last_name: 'ユーザー',\r\n          email: 'dev@example.com',\r\n          role: USER_ROLES.GENERAL_USER,\r\n          department: '開発部門',\r\n          permissions: ['read', 'write', 'api_access'],\r\n          microsoftInfo: {\r\n            displayName: '開発 ユーザー',\r\n            userPrincipalName: 'dev@example.com',\r\n            accountType: 'Development'\r\n          }\r\n        };\r\n        console.log('開発モード: デフォルトユーザーを設定', defaultUser);\r\n        setCurrentUser(defaultUser);\r\n      }\r\n      \r\n      setLoading(false);\r\n    };\r\n\r\n    // 認証状態チェックを即時実行（開発モードではすぐに認証完了状態にする）\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  // Microsoft認証処理関数\r\n  const loginWithMicrosoft = async (msUserData) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      \r\n      // Microsoft Graph API からのレスポンスを扱う場合\r\n      if (msUserData && msUserData.account) {\r\n        console.log('Microsoft認証成功 - 実際のユーザーデータ:', msUserData);\r\n        \r\n        // Microsoft ADからのユーザー情報を処理\r\n        const msUser = {\r\n          id: msUserData.account.homeAccountId || 'ms-user',\r\n          first_name: msUserData.account.name ? msUserData.account.name.split(' ')[0] : '名前なし',\r\n          last_name: msUserData.account.name ? msUserData.account.name.split(' ')[1] || '' : '',\r\n          email: msUserData.account.username || 'unknown@example.com',\r\n          // MSユーザーのロールは固定または別途APIから取得する\r\n          role: USER_ROLES.GENERAL_USER,\r\n          department: msUserData.account.department || '未設定',\r\n          permissions: ['read', 'write'],\r\n          avatar: null,\r\n          // Microsoft独自の情報を保存\r\n          microsoftInfo: {\r\n            displayName: msUserData.account.name || 'Microsoft User',\r\n            userPrincipalName: msUserData.account.username,\r\n            tenantId: msUserData.account.homeAccountId?.split('.')[1] || '',\r\n            accountType: msUserData.account.environment || 'Azure AD',\r\n            // その他のMicrosoft固有情報\r\n          }\r\n        };\r\n        \r\n        // トークン保存\r\n        const token = msUserData.accessToken || ('ms-token-' + Math.random().toString(36).substring(2));\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('userRole', 'msuser');  // Microsoftユーザーのマーカー\r\n        localStorage.setItem('msUserInfo', JSON.stringify({\r\n          displayName: msUser.microsoftInfo.displayName,\r\n          userPrincipalName: msUser.microsoftInfo.userPrincipalName,\r\n          accountType: msUser.microsoftInfo.accountType\r\n        }));\r\n        \r\n        setCurrentUser(msUser);\r\n        setLoading(false);\r\n        return true;\r\n      } else {\r\n        console.log('Microsoft認証をモックモードで実行中...');\r\n        \r\n        // モック認証: Microsoft認証情報がない場合\r\n        await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒遅延で認証を模擬\r\n        \r\n        // Microsoft ADユーザーを模擬\r\n        // ログイン時のメールアドレスから名前生成（実際の環境ではGraph APIから取得）\r\n        const loginEmail = 'microsoft.login@contoso.com'; // 実際の環境では認証時に使用したメールアドレス\r\n        const nameParts = loginEmail.split('@')[0].split('.');\r\n        const firstName = nameParts.length > 1 ? nameParts[1] : nameParts[0];\r\n        const lastName = nameParts.length > 1 ? nameParts[0] : '';\r\n        \r\n        // メールアドレスから推測したフルネーム（姓名）\r\n        const fullName = lastName && firstName \r\n          ? `${lastName} ${firstName}` \r\n          : firstName;\r\n          \r\n        const mockMsUser = {\r\n          id: 'ms-user-123',\r\n          first_name: firstName,\r\n          last_name: lastName,\r\n          email: loginEmail,\r\n          role: USER_ROLES.GENERAL_USER,\r\n          department: '自動取得部署',\r\n          permissions: ['read', 'write'],\r\n          avatar: null,\r\n          // Microsoft独自の情報\r\n          microsoftInfo: {\r\n            // 実際のMicrosoft Entra IDから取得される情報（ここではメールからの推測）\r\n            displayName: fullName,      // 表示名（Microsoft Graph APIのdisplayName）\r\n            userPrincipalName: loginEmail, // UPN（ログインに使用されたメールアドレス）\r\n            tenantId: 'a7232f7a-a9e5-4f71-9372-dc8b1c6645ea',\r\n            accountType: 'Microsoft Entra ID',\r\n          }\r\n        };\r\n        \r\n        const token = 'mock-ms-token-' + Math.random().toString(36).substring(2);\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('userRole', 'msuser');\r\n        localStorage.setItem('msUserInfo', JSON.stringify({\r\n          displayName: mockMsUser.microsoftInfo.displayName,\r\n          userPrincipalName: mockMsUser.microsoftInfo.userPrincipalName,\r\n          accountType: mockMsUser.microsoftInfo.accountType\r\n        }));\r\n        \r\n        setCurrentUser(mockMsUser);\r\n        setLoading(false);\r\n        \r\n        console.log('Microsoft認証成功（モックモード）');\r\n        return true;\r\n      }\r\n    } catch (err) {\r\n      console.error('Microsoft認証エラー:', err);\r\n      setError('Microsoft認証に失敗しました。再度お試しください。');\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 通常ログイン関数\r\n  const login = async (username, password) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // ログイン試行をコンソールに出力（デバッグ用）\r\n      console.log(`ログイン試行: username=${username}, password=${password}`);\r\n      \r\n      // 入力チェック\r\n      if (!username || !password) {\r\n        console.error('入力エラー: ユーザー名またはパスワードが入力されていません');\r\n        throw new Error('ユーザー名とパスワードを入力してください');\r\n      }\r\n      \r\n      // テスト用アカウントの検証\r\n      let userRole = null;\r\n      \r\n      // 厳密な比較で検証\r\n      if (username === 'admin' && password === 'admin') {\r\n        console.log('管理者アカウントでのログイン成功');\r\n        userRole = 'admin'; // グローバル管理者\r\n      } else if (username === 'user' && password === 'user') {\r\n        console.log('一般ユーザーアカウントでのログイン成功');\r\n        userRole = 'user'; // 一般ユーザー\r\n      } else if (username === 'guest' && password === 'guest') {\r\n        console.log('ゲストアカウントでのログイン成功');\r\n        userRole = 'guest'; // ゲスト\r\n      } else {\r\n        console.error(`ログイン認証失敗: ユーザー ${username} は認証されませんでした`);\r\n        throw new Error('ユーザー名またはパスワードが正しくありません');\r\n      }\r\n      \r\n      // モックトークンとユーザー情報を設定\r\n      const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('userRole', userRole);\r\n      \r\n      // ユーザー情報を設定\r\n      console.log(`ユーザー情報設定: ${userRole}`, MOCK_USERS[userRole]);\r\n      setCurrentUser(MOCK_USERS[userRole]);\r\n      \r\n      console.log(`ログイン成功: ${username} (${userRole}) - トークン: ${token}`);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('ログインエラー:', err);\r\n      setError(err.message || 'ログインに失敗しました。');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // ログアウト関数\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userRole');\r\n    setCurrentUser(null);\r\n    console.log('ログアウトしました');\r\n  };\r\n\r\n  // 権限チェック関数\r\n  const hasPermission = (permission) => {\r\n    if (!currentUser) return false;\r\n    return currentUser.permissions.includes(permission);\r\n  };\r\n\r\n  // 提供する値\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    login,\r\n    loginWithMicrosoft,\r\n    logout,\r\n    hasPermission,\r\n    isAuthenticated: !!currentUser,\r\n    USER_ROLES // ロール定数をエクスポート\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// カスタムフック\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}