{"ast":null,"code":"var _jsxFileName = \"F:\\\\kitting\\\\ITManagementSystem\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// 認証コンテキストの作成\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// 開発用のモックユーザーロール\nconst USER_ROLES = {\n  GLOBAL_ADMIN: 'グローバル管理者',\n  GENERAL_USER: '一般ユーザー',\n  GUEST: 'ゲスト'\n};\n\n// 開発用のモックユーザーデータ\nconst MOCK_USERS = {\n  'admin': {\n    id: '1',\n    first_name: '太郎',\n    last_name: '山田',\n    email: 'taro.yamada@example.com',\n    role: USER_ROLES.GLOBAL_ADMIN,\n    department: 'IT部門',\n    permissions: ['admin', 'read', 'write', 'api_management'],\n    avatar: 'https://i.pravatar.cc/150?img=1'\n  },\n  'user': {\n    id: '2',\n    first_name: '一郎',\n    last_name: '鈴木',\n    email: 'ichiro.suzuki@example.com',\n    role: USER_ROLES.GENERAL_USER,\n    department: 'IT部門',\n    permissions: ['read', 'write'],\n    avatar: 'https://i.pravatar.cc/150?img=2'\n  },\n  'guest': {\n    id: '3',\n    first_name: '次郎',\n    last_name: '佐藤',\n    email: 'jiro.sato@example.com',\n    role: USER_ROLES.GUEST,\n    department: '営業部',\n    permissions: ['read'],\n    avatar: 'https://i.pravatar.cc/150?img=3'\n  }\n};\n\n// 認証プロバイダーコンポーネント\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 開発モード: ユーザー認証状態の確認\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      const token = localStorage.getItem('token');\n      const userRole = localStorage.getItem('userRole');\n      if (token && userRole && MOCK_USERS[userRole]) {\n        try {\n          // 開発モード: モックユーザーデータをセット\n          setCurrentUser(MOCK_USERS[userRole]);\n        } catch (err) {\n          console.error('認証エラー:', err);\n          localStorage.removeItem('token');\n          localStorage.removeItem('userRole');\n          setCurrentUser(null);\n        }\n      }\n      setLoading(false);\n    };\n\n    // 1秒後に認証状態チェックを模擬（ロード中の表示確認用）\n    setTimeout(() => {\n      checkAuthStatus();\n    }, 1000);\n  }, []);\n\n  // Microsoft認証処理関数\n  const loginWithMicrosoft = async msUserData => {\n    try {\n      setError(null);\n      setLoading(true);\n\n      // Microsoft Graph API からのレスポンスを扱う場合\n      if (msUserData && msUserData.account) {\n        var _msUserData$account$h;\n        console.log('Microsoft認証成功 - 実際のユーザーデータ:', msUserData);\n\n        // Microsoft ADからのユーザー情報を処理\n        const msUser = {\n          id: msUserData.account.homeAccountId || 'ms-user',\n          first_name: msUserData.account.name ? msUserData.account.name.split(' ')[0] : '名前なし',\n          last_name: msUserData.account.name ? msUserData.account.name.split(' ')[1] || '' : '',\n          email: msUserData.account.username || 'unknown@example.com',\n          // MSユーザーのロールは固定または別途APIから取得する\n          role: USER_ROLES.GENERAL_USER,\n          department: msUserData.account.department || '未設定',\n          permissions: ['read', 'write'],\n          avatar: null,\n          // Microsoft独自の情報を保存\n          microsoftInfo: {\n            displayName: msUserData.account.name || 'Microsoft User',\n            userPrincipalName: msUserData.account.username,\n            tenantId: ((_msUserData$account$h = msUserData.account.homeAccountId) === null || _msUserData$account$h === void 0 ? void 0 : _msUserData$account$h.split('.')[1]) || '',\n            accountType: msUserData.account.environment || 'Azure AD'\n            // その他のMicrosoft固有情報\n          }\n        };\n\n        // トークン保存\n        const token = msUserData.accessToken || 'ms-token-' + Math.random().toString(36).substring(2);\n        localStorage.setItem('token', token);\n        localStorage.setItem('userRole', 'msuser'); // Microsoftユーザーのマーカー\n        localStorage.setItem('msUserInfo', JSON.stringify({\n          displayName: msUser.microsoftInfo.displayName,\n          userPrincipalName: msUser.microsoftInfo.userPrincipalName,\n          accountType: msUser.microsoftInfo.accountType\n        }));\n        setCurrentUser(msUser);\n        setLoading(false);\n        return true;\n      } else {\n        console.log('Microsoft認証をモックモードで実行中...');\n\n        // モック認証: Microsoft認証情報がない場合\n        await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒遅延で認証を模擬\n\n        // Microsoft ADユーザーを模擬\n        // ログイン時のメールアドレスから名前生成（実際の環境ではGraph APIから取得）\n        const loginEmail = 'microsoft.login@contoso.com'; // 実際の環境では認証時に使用したメールアドレス\n        const nameParts = loginEmail.split('@')[0].split('.');\n        const firstName = nameParts.length > 1 ? nameParts[1] : nameParts[0];\n        const lastName = nameParts.length > 1 ? nameParts[0] : '';\n\n        // メールアドレスから推測したフルネーム（姓名）\n        const fullName = lastName && firstName ? `${lastName} ${firstName}` : firstName;\n        const mockMsUser = {\n          id: 'ms-user-123',\n          first_name: firstName,\n          last_name: lastName,\n          email: loginEmail,\n          role: USER_ROLES.GENERAL_USER,\n          department: '自動取得部署',\n          permissions: ['read', 'write'],\n          avatar: null,\n          // Microsoft独自の情報\n          microsoftInfo: {\n            // 実際のMicrosoft Entra IDから取得される情報（ここではメールからの推測）\n            displayName: fullName,\n            // 表示名（Microsoft Graph APIのdisplayName）\n            userPrincipalName: loginEmail,\n            // UPN（ログインに使用されたメールアドレス）\n            tenantId: 'a7232f7a-a9e5-4f71-9372-dc8b1c6645ea',\n            accountType: 'Microsoft Entra ID'\n          }\n        };\n        const token = 'mock-ms-token-' + Math.random().toString(36).substring(2);\n        localStorage.setItem('token', token);\n        localStorage.setItem('userRole', 'msuser');\n        localStorage.setItem('msUserInfo', JSON.stringify({\n          displayName: mockMsUser.microsoftInfo.displayName,\n          userPrincipalName: mockMsUser.microsoftInfo.userPrincipalName,\n          accountType: mockMsUser.microsoftInfo.accountType\n        }));\n        setCurrentUser(mockMsUser);\n        setLoading(false);\n        console.log('Microsoft認証成功（モックモード）');\n        return true;\n      }\n    } catch (err) {\n      console.error('Microsoft認証エラー:', err);\n      setError('Microsoft認証に失敗しました。再度お試しください。');\n      setLoading(false);\n      return false;\n    }\n  };\n\n  // 通常ログイン関数\n  const login = async (username, password) => {\n    try {\n      setError(null);\n\n      // ログイン試行をコンソールに出力（デバッグ用）\n      console.log(`ログイン試行: username=${username}, password=${password}`);\n\n      // 入力チェック\n      if (!username || !password) {\n        console.error('入力エラー: ユーザー名またはパスワードが入力されていません');\n        throw new Error('ユーザー名とパスワードを入力してください');\n      }\n\n      // テスト用アカウントの検証\n      let userRole = null;\n\n      // 厳密な比較で検証\n      if (username === 'admin' && password === 'admin') {\n        console.log('管理者アカウントでのログイン成功');\n        userRole = 'admin'; // グローバル管理者\n      } else if (username === 'user' && password === 'user') {\n        console.log('一般ユーザーアカウントでのログイン成功');\n        userRole = 'user'; // 一般ユーザー\n      } else if (username === 'guest' && password === 'guest') {\n        console.log('ゲストアカウントでのログイン成功');\n        userRole = 'guest'; // ゲスト\n      } else {\n        console.error(`ログイン認証失敗: ユーザー ${username} は認証されませんでした`);\n        throw new Error('ユーザー名またはパスワードが正しくありません');\n      }\n\n      // モックトークンとユーザー情報を設定\n      const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\n      localStorage.setItem('token', token);\n      localStorage.setItem('userRole', userRole);\n\n      // ユーザー情報を設定\n      console.log(`ユーザー情報設定: ${userRole}`, MOCK_USERS[userRole]);\n      setCurrentUser(MOCK_USERS[userRole]);\n      console.log(`ログイン成功: ${username} (${userRole}) - トークン: ${token}`);\n      return true;\n    } catch (err) {\n      console.error('ログインエラー:', err);\n      setError(err.message || 'ログインに失敗しました。');\n      return false;\n    }\n  };\n\n  // ログアウト関数\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userRole');\n    setCurrentUser(null);\n    console.log('ログアウトしました');\n  };\n\n  // 権限チェック関数\n  const hasPermission = permission => {\n    if (!currentUser) return false;\n    return currentUser.permissions.includes(permission);\n  };\n\n  // 提供する値\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    loginWithMicrosoft,\n    logout,\n    hasPermission,\n    isAuthenticated: !!currentUser,\n    USER_ROLES // ロール定数をエクスポート\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 10\n  }, this);\n};\n\n// カスタムフック\n_s(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","USER_ROLES","GLOBAL_ADMIN","GENERAL_USER","GUEST","MOCK_USERS","id","first_name","last_name","email","role","department","permissions","avatar","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","checkAuthStatus","token","localStorage","getItem","userRole","err","console","removeItem","setTimeout","loginWithMicrosoft","msUserData","account","_msUserData$account$h","log","msUser","homeAccountId","name","split","username","microsoftInfo","displayName","userPrincipalName","tenantId","accountType","environment","accessToken","Math","random","toString","substring","setItem","JSON","stringify","Promise","resolve","loginEmail","nameParts","firstName","length","lastName","fullName","mockMsUser","login","password","Error","message","logout","hasPermission","permission","includes","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["F:/kitting/ITManagementSystem/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// 認証コンテキストの作成\r\nconst AuthContext = createContext();\r\n\r\n// 開発用のモックユーザーロール\r\nconst USER_ROLES = {\r\n  GLOBAL_ADMIN: 'グローバル管理者',\r\n  GENERAL_USER: '一般ユーザー',\r\n  GUEST: 'ゲスト'\r\n};\r\n\r\n// 開発用のモックユーザーデータ\r\nconst MOCK_USERS = {\r\n  'admin': {\r\n    id: '1',\r\n    first_name: '太郎',\r\n    last_name: '山田',\r\n    email: 'taro.yamada@example.com',\r\n    role: USER_ROLES.GLOBAL_ADMIN,\r\n    department: 'IT部門',\r\n    permissions: ['admin', 'read', 'write', 'api_management'],\r\n    avatar: 'https://i.pravatar.cc/150?img=1'\r\n  },\r\n  'user': {\r\n    id: '2',\r\n    first_name: '一郎',\r\n    last_name: '鈴木',\r\n    email: 'ichiro.suzuki@example.com',\r\n    role: USER_ROLES.GENERAL_USER,\r\n    department: 'IT部門',\r\n    permissions: ['read', 'write'],\r\n    avatar: 'https://i.pravatar.cc/150?img=2'\r\n  },\r\n  'guest': {\r\n    id: '3',\r\n    first_name: '次郎',\r\n    last_name: '佐藤',\r\n    email: 'jiro.sato@example.com',\r\n    role: USER_ROLES.GUEST,\r\n    department: '営業部',\r\n    permissions: ['read'],\r\n    avatar: 'https://i.pravatar.cc/150?img=3'\r\n  }\r\n};\r\n\r\n// 認証プロバイダーコンポーネント\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 開発モード: ユーザー認証状態の確認\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const userRole = localStorage.getItem('userRole');\r\n      \r\n      if (token && userRole && MOCK_USERS[userRole]) {\r\n        try {\r\n          // 開発モード: モックユーザーデータをセット\r\n          setCurrentUser(MOCK_USERS[userRole]);\r\n        } catch (err) {\r\n          console.error('認証エラー:', err);\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userRole');\r\n          setCurrentUser(null);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    // 1秒後に認証状態チェックを模擬（ロード中の表示確認用）\r\n    setTimeout(() => {\r\n      checkAuthStatus();\r\n    }, 1000);\r\n  }, []);\r\n\r\n  // Microsoft認証処理関数\r\n  const loginWithMicrosoft = async (msUserData) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      \r\n      // Microsoft Graph API からのレスポンスを扱う場合\r\n      if (msUserData && msUserData.account) {\r\n        console.log('Microsoft認証成功 - 実際のユーザーデータ:', msUserData);\r\n        \r\n        // Microsoft ADからのユーザー情報を処理\r\n        const msUser = {\r\n          id: msUserData.account.homeAccountId || 'ms-user',\r\n          first_name: msUserData.account.name ? msUserData.account.name.split(' ')[0] : '名前なし',\r\n          last_name: msUserData.account.name ? msUserData.account.name.split(' ')[1] || '' : '',\r\n          email: msUserData.account.username || 'unknown@example.com',\r\n          // MSユーザーのロールは固定または別途APIから取得する\r\n          role: USER_ROLES.GENERAL_USER,\r\n          department: msUserData.account.department || '未設定',\r\n          permissions: ['read', 'write'],\r\n          avatar: null,\r\n          // Microsoft独自の情報を保存\r\n          microsoftInfo: {\r\n            displayName: msUserData.account.name || 'Microsoft User',\r\n            userPrincipalName: msUserData.account.username,\r\n            tenantId: msUserData.account.homeAccountId?.split('.')[1] || '',\r\n            accountType: msUserData.account.environment || 'Azure AD',\r\n            // その他のMicrosoft固有情報\r\n          }\r\n        };\r\n        \r\n        // トークン保存\r\n        const token = msUserData.accessToken || ('ms-token-' + Math.random().toString(36).substring(2));\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('userRole', 'msuser');  // Microsoftユーザーのマーカー\r\n        localStorage.setItem('msUserInfo', JSON.stringify({\r\n          displayName: msUser.microsoftInfo.displayName,\r\n          userPrincipalName: msUser.microsoftInfo.userPrincipalName,\r\n          accountType: msUser.microsoftInfo.accountType\r\n        }));\r\n        \r\n        setCurrentUser(msUser);\r\n        setLoading(false);\r\n        return true;\r\n      } else {\r\n        console.log('Microsoft認証をモックモードで実行中...');\r\n        \r\n        // モック認証: Microsoft認証情報がない場合\r\n        await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒遅延で認証を模擬\r\n        \r\n        // Microsoft ADユーザーを模擬\r\n        // ログイン時のメールアドレスから名前生成（実際の環境ではGraph APIから取得）\r\n        const loginEmail = 'microsoft.login@contoso.com'; // 実際の環境では認証時に使用したメールアドレス\r\n        const nameParts = loginEmail.split('@')[0].split('.');\r\n        const firstName = nameParts.length > 1 ? nameParts[1] : nameParts[0];\r\n        const lastName = nameParts.length > 1 ? nameParts[0] : '';\r\n        \r\n        // メールアドレスから推測したフルネーム（姓名）\r\n        const fullName = lastName && firstName \r\n          ? `${lastName} ${firstName}` \r\n          : firstName;\r\n          \r\n        const mockMsUser = {\r\n          id: 'ms-user-123',\r\n          first_name: firstName,\r\n          last_name: lastName,\r\n          email: loginEmail,\r\n          role: USER_ROLES.GENERAL_USER,\r\n          department: '自動取得部署',\r\n          permissions: ['read', 'write'],\r\n          avatar: null,\r\n          // Microsoft独自の情報\r\n          microsoftInfo: {\r\n            // 実際のMicrosoft Entra IDから取得される情報（ここではメールからの推測）\r\n            displayName: fullName,      // 表示名（Microsoft Graph APIのdisplayName）\r\n            userPrincipalName: loginEmail, // UPN（ログインに使用されたメールアドレス）\r\n            tenantId: 'a7232f7a-a9e5-4f71-9372-dc8b1c6645ea',\r\n            accountType: 'Microsoft Entra ID',\r\n          }\r\n        };\r\n        \r\n        const token = 'mock-ms-token-' + Math.random().toString(36).substring(2);\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('userRole', 'msuser');\r\n        localStorage.setItem('msUserInfo', JSON.stringify({\r\n          displayName: mockMsUser.microsoftInfo.displayName,\r\n          userPrincipalName: mockMsUser.microsoftInfo.userPrincipalName,\r\n          accountType: mockMsUser.microsoftInfo.accountType\r\n        }));\r\n        \r\n        setCurrentUser(mockMsUser);\r\n        setLoading(false);\r\n        \r\n        console.log('Microsoft認証成功（モックモード）');\r\n        return true;\r\n      }\r\n    } catch (err) {\r\n      console.error('Microsoft認証エラー:', err);\r\n      setError('Microsoft認証に失敗しました。再度お試しください。');\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 通常ログイン関数\r\n  const login = async (username, password) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // ログイン試行をコンソールに出力（デバッグ用）\r\n      console.log(`ログイン試行: username=${username}, password=${password}`);\r\n      \r\n      // 入力チェック\r\n      if (!username || !password) {\r\n        console.error('入力エラー: ユーザー名またはパスワードが入力されていません');\r\n        throw new Error('ユーザー名とパスワードを入力してください');\r\n      }\r\n      \r\n      // テスト用アカウントの検証\r\n      let userRole = null;\r\n      \r\n      // 厳密な比較で検証\r\n      if (username === 'admin' && password === 'admin') {\r\n        console.log('管理者アカウントでのログイン成功');\r\n        userRole = 'admin'; // グローバル管理者\r\n      } else if (username === 'user' && password === 'user') {\r\n        console.log('一般ユーザーアカウントでのログイン成功');\r\n        userRole = 'user'; // 一般ユーザー\r\n      } else if (username === 'guest' && password === 'guest') {\r\n        console.log('ゲストアカウントでのログイン成功');\r\n        userRole = 'guest'; // ゲスト\r\n      } else {\r\n        console.error(`ログイン認証失敗: ユーザー ${username} は認証されませんでした`);\r\n        throw new Error('ユーザー名またはパスワードが正しくありません');\r\n      }\r\n      \r\n      // モックトークンとユーザー情報を設定\r\n      const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('userRole', userRole);\r\n      \r\n      // ユーザー情報を設定\r\n      console.log(`ユーザー情報設定: ${userRole}`, MOCK_USERS[userRole]);\r\n      setCurrentUser(MOCK_USERS[userRole]);\r\n      \r\n      console.log(`ログイン成功: ${username} (${userRole}) - トークン: ${token}`);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('ログインエラー:', err);\r\n      setError(err.message || 'ログインに失敗しました。');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // ログアウト関数\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userRole');\r\n    setCurrentUser(null);\r\n    console.log('ログアウトしました');\r\n  };\r\n\r\n  // 権限チェック関数\r\n  const hasPermission = (permission) => {\r\n    if (!currentUser) return false;\r\n    return currentUser.permissions.includes(permission);\r\n  };\r\n\r\n  // 提供する値\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    login,\r\n    loginWithMicrosoft,\r\n    logout,\r\n    hasPermission,\r\n    isAuthenticated: !!currentUser,\r\n    USER_ROLES // ロール定数をエクスポート\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// カスタムフック\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}