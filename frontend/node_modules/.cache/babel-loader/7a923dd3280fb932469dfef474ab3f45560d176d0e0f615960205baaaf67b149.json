{"ast":null,"code":"var _jsxFileName = \"F:\\\\kitting\\\\ITManagementSystem\\\\frontend\\\\src\\\\pages\\\\MicrosoftCallback.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MicrosoftCallback = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    loginWithMicrosoft\n  } = useAuth();\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authType, setAuthType] = useState('microsoft'); // 'microsoft' または 'hengeoine'\n\n  // Microsoft認証設定\n  const msAuthConfig = {\n    clientId: process.env.REACT_APP_MS_CLIENT_ID || '12345678-1234-1234-1234-123456789012',\n    // 環境変数から取得、またはテスト用の代替ID\n    redirectUri: 'https://localhost:5000/auth/callback',\n    // バックエンド側のコールバックURLに戻す\n    authority: `https://login.microsoftonline.com/${process.env.REACT_APP_MS_TENANT_ID || 'common'}`,\n    // テナントIDを使用\n    scopes: ['openid', 'profile', 'email', 'User.Read']\n  };\n  useEffect(() => {\n    const handleAuth = async () => {\n      try {\n        // URLクエリパラメータから認証情報を取得\n        const queryParams = new URLSearchParams(location.search);\n        const code = queryParams.get('code');\n        const error = queryParams.get('error');\n        const errorDescription = queryParams.get('error_description');\n        const sessionState = queryParams.get('session_state');\n\n        // エラーパラメータの確認\n        if (error) {\n          console.error('認証エラー:', errorDescription || error);\n\n          // エラーメッセージを表示\n          setError(`認証エラー: ${errorDescription || error}`);\n          setLoading(false);\n          return;\n        }\n\n        // 認証コードがない場合\n        if (!code) {\n          throw new Error('認証コードが取得できませんでした。');\n        }\n\n        // 開発用: コンソールに認証コードの存在を記録\n        console.log('認証コードを受信しました');\n        console.log('セッション状態:', sessionState);\n\n        // 実際の環境では、この認証コードを使ってトークンを取得し、\n        // Microsoft Graph APIでユーザー情報を取得します\n\n        // 実際のログイン情報に近い模擬ユーザー情報を生成\n        // 注: 実環境では認証コードを使ってトークンを取得し、\n        //    そのトークンでGraph APIからこれらの情報を取得します\n\n        // 実際のリクエスト情報から得られるユーザー情報（モック）\n        const email = queryParams.get('login_hint') || 'taro.yamada@contoso.com';\n        const state = queryParams.get('state') || '';\n\n        // セッション情報からユーザーIDを生成\n        const userId = sessionState ? sessionState.substring(0, 8) : code.substring(0, 8);\n\n        // 実際のMicrosoft Entra IDから返ってくるユーザー情報に近いデータを構築\n        const mockUserData = {\n          account: {\n            // Graph APIから返されるユーザー表示名（Microsoft Entra IDに登録された名前）\n            name: '山田 太郎',\n            // Microsoft Entra IDに登録されている実際の表示名\n            // 認証に使用したメールアドレス（UPN）\n            username: email,\n            // アカウント識別子\n            homeAccountId: `${userId}.a7232f7a-a9e5-4f71-9372-dc8b1c6645ea`,\n            // アカウント環境（組織名など）\n            environment: 'Microsoft Entra ID',\n            tenantId: 'a7232f7a-a9e5-4f71-9372-dc8b1c6645ea'\n          },\n          // 開発環境用のアクセストークン\n          accessToken: `eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.${code.substring(0, 10)}`\n        };\n        console.log('認証ユーザー情報:', {\n          displayName: mockUserData.account.name,\n          userPrincipalName: mockUserData.account.username,\n          environment: mockUserData.account.environment\n        });\n\n        // 認証処理（模擬データを渡す）\n        const success = await loginWithMicrosoft(mockUserData);\n        if (success) {\n          // 認証成功\n          navigate('/dashboard');\n        } else {\n          throw new Error('認証に失敗しました');\n        }\n      } catch (err) {\n        console.error('認証エラー:', err);\n        setError(err.message || '認証処理中にエラーが発生しました');\n        setLoading(false);\n      }\n    };\n    handleAuth();\n  }, [loginWithMicrosoft, navigate, location]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex flex-col items-center justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold text-secondary-700\",\n        children: [authType === 'hengeoine' ? 'HENGEOINE認証' : 'Microsoft認証', \"\\u51E6\\u7406\\u4E2D...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-secondary-500\",\n        children: \"\\u3057\\u3070\\u3089\\u304F\\u304A\\u5F85\\u3061\\u304F\\u3060\\u3055\\u3044\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), authType === 'hengeoine' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 max-w-md text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-blue-50 border border-blue-200 rounded p-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs px-1 py-0.5 bg-blue-100 text-blue-800 rounded-sm\",\n            children: \"HENGEOINE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-blue-800 mt-1\",\n            children: \"\\u30D5\\u30A7\\u30C7\\u30EC\\u30FC\\u30B7\\u30E7\\u30F3\\u8A8D\\u8A3C\\u304B\\u3089\\u306E\\u30B3\\u30FC\\u30EB\\u30D0\\u30C3\\u30AF\\u3092\\u51E6\\u7406\\u3057\\u3066\\u3044\\u307E\\u3059\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex flex-col items-center justify-center p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 max-w-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center mb-2\",\n          children: authType === 'hengeoine' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs px-1 py-0.5 bg-blue-100 text-blue-800 rounded-sm mr-2\",\n              children: \"HENGEOINE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-bold\",\n              children: \"\\u30D5\\u30A7\\u30C7\\u30EC\\u30FC\\u30B7\\u30E7\\u30F3\\u8A8D\\u8A3C\\u30A8\\u30E9\\u30FC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-bold\",\n            children: \"Microsoft\\u8A8D\\u8A3C\\u30A8\\u30E9\\u30FC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs mt-2 text-red-600\",\n          children: authType === 'hengeoine' ? 'HENGEOINE認証サーバーからの応答に問題がありました。' : 'Microsoft認証サーバーからの応答に問題がありました。'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/login'),\n        className: \"px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700\",\n        children: \"\\u30ED\\u30B0\\u30A4\\u30F3\\u30DA\\u30FC\\u30B8\\u306B\\u623B\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n  return null;\n};\n_s(MicrosoftCallback, \"HNZXA79qhuhxDPSIngBoEf8FaC4=\", false, function () {\n  return [useNavigate, useLocation, useAuth];\n});\n_c = MicrosoftCallback;\nexport default MicrosoftCallback;\nvar _c;\n$RefreshReg$(_c, \"MicrosoftCallback\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","useAuth","jsxDEV","_jsxDEV","Fragment","_Fragment","MicrosoftCallback","_s","navigate","location","loginWithMicrosoft","error","setError","loading","setLoading","authType","setAuthType","msAuthConfig","clientId","process","env","REACT_APP_MS_CLIENT_ID","redirectUri","authority","REACT_APP_MS_TENANT_ID","scopes","handleAuth","queryParams","URLSearchParams","search","code","get","errorDescription","sessionState","console","Error","log","email","state","userId","substring","mockUserData","account","name","username","homeAccountId","environment","tenantId","accessToken","displayName","userPrincipalName","success","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["F:/kitting/ITManagementSystem/frontend/src/pages/MicrosoftCallback.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\nconst MicrosoftCallback = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { loginWithMicrosoft } = useAuth();\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [authType, setAuthType] = useState('microsoft'); // 'microsoft' または 'hengeoine'\r\n  \r\n  // Microsoft認証設定\r\n  const msAuthConfig = {\r\n    clientId: process.env.REACT_APP_MS_CLIENT_ID || '12345678-1234-1234-1234-123456789012', // 環境変数から取得、またはテスト用の代替ID\r\n    redirectUri: 'https://localhost:5000/auth/callback', // バックエンド側のコールバックURLに戻す\r\n    authority: `https://login.microsoftonline.com/${process.env.REACT_APP_MS_TENANT_ID || 'common'}`, // テナントIDを使用\r\n    scopes: ['openid', 'profile', 'email', 'User.Read']\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleAuth = async () => {\r\n      try {\r\n        // URLクエリパラメータから認証情報を取得\r\n        const queryParams = new URLSearchParams(location.search);\r\n        const code = queryParams.get('code');\r\n        const error = queryParams.get('error');\r\n        const errorDescription = queryParams.get('error_description');\r\n        const sessionState = queryParams.get('session_state');\r\n        \r\n        // エラーパラメータの確認\r\n        if (error) {\r\n          console.error('認証エラー:', errorDescription || error);\r\n          \r\n          // エラーメッセージを表示\r\n          setError(`認証エラー: ${errorDescription || error}`);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n        \r\n        // 認証コードがない場合\r\n        if (!code) {\r\n          throw new Error('認証コードが取得できませんでした。');\r\n        }\r\n        \r\n        // 開発用: コンソールに認証コードの存在を記録\r\n        console.log('認証コードを受信しました');\r\n        console.log('セッション状態:', sessionState);\r\n        \r\n        // 実際の環境では、この認証コードを使ってトークンを取得し、\r\n        // Microsoft Graph APIでユーザー情報を取得します\r\n        \r\n        // 実際のログイン情報に近い模擬ユーザー情報を生成\r\n        // 注: 実環境では認証コードを使ってトークンを取得し、\r\n        //    そのトークンでGraph APIからこれらの情報を取得します\r\n        \r\n        // 実際のリクエスト情報から得られるユーザー情報（モック）\r\n        const email = queryParams.get('login_hint') || 'taro.yamada@contoso.com';\r\n        const state = queryParams.get('state') || '';\r\n        \r\n        // セッション情報からユーザーIDを生成\r\n        const userId = sessionState ? \r\n          sessionState.substring(0, 8) : \r\n          code.substring(0, 8);\r\n        \r\n        // 実際のMicrosoft Entra IDから返ってくるユーザー情報に近いデータを構築\r\n        const mockUserData = {\r\n          account: {\r\n            // Graph APIから返されるユーザー表示名（Microsoft Entra IDに登録された名前）\r\n            name: '山田 太郎',  // Microsoft Entra IDに登録されている実際の表示名\r\n            // 認証に使用したメールアドレス（UPN）\r\n            username: email,\r\n            // アカウント識別子\r\n            homeAccountId: `${userId}.a7232f7a-a9e5-4f71-9372-dc8b1c6645ea`,\r\n            // アカウント環境（組織名など）\r\n            environment: 'Microsoft Entra ID',\r\n            tenantId: 'a7232f7a-a9e5-4f71-9372-dc8b1c6645ea'\r\n          },\r\n          // 開発環境用のアクセストークン\r\n          accessToken: `eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.${code.substring(0, 10)}`\r\n        };\r\n        \r\n        console.log('認証ユーザー情報:', {\r\n          displayName: mockUserData.account.name,\r\n          userPrincipalName: mockUserData.account.username,\r\n          environment: mockUserData.account.environment\r\n        });\r\n        \r\n        // 認証処理（模擬データを渡す）\r\n        const success = await loginWithMicrosoft(mockUserData);\r\n        \r\n        if (success) {\r\n          // 認証成功\r\n          navigate('/dashboard');\r\n        } else {\r\n          throw new Error('認証に失敗しました');\r\n        }\r\n      } catch (err) {\r\n        console.error('認証エラー:', err);\r\n        setError(err.message || '認証処理中にエラーが発生しました');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    handleAuth();\r\n  }, [loginWithMicrosoft, navigate, location]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen flex flex-col items-center justify-center\">\r\n        <div className=\"mb-4\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600\"></div>\r\n        </div>\r\n        <h2 className=\"text-xl font-semibold text-secondary-700\">\r\n          {authType === 'hengeoine' ? 'HENGEOINE認証' : 'Microsoft認証'}処理中...\r\n        </h2>\r\n        <p className=\"mt-2 text-secondary-500\">しばらくお待ちください</p>\r\n        \r\n        {authType === 'hengeoine' && (\r\n          <div className=\"mt-4 max-w-md text-center\">\r\n            <div className=\"bg-blue-50 border border-blue-200 rounded p-3\">\r\n              <span className=\"text-xs px-1 py-0.5 bg-blue-100 text-blue-800 rounded-sm\">HENGEOINE</span>\r\n              <p className=\"text-sm text-blue-800 mt-1\">\r\n                フェデレーション認証からのコールバックを処理しています\r\n              </p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen flex flex-col items-center justify-center p-4\">\r\n        <div className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 max-w-md\">\r\n          <div className=\"flex items-center mb-2\">\r\n            {authType === 'hengeoine' ? (\r\n              <>\r\n                <span className=\"text-xs px-1 py-0.5 bg-blue-100 text-blue-800 rounded-sm mr-2\">HENGEOINE</span>\r\n                <p className=\"font-bold\">フェデレーション認証エラー</p>\r\n              </>\r\n            ) : (\r\n              <p className=\"font-bold\">Microsoft認証エラー</p>\r\n            )}\r\n          </div>\r\n          <p>{error}</p>\r\n          <p className=\"text-xs mt-2 text-red-600\">\r\n            {authType === 'hengeoine' \r\n              ? 'HENGEOINE認証サーバーからの応答に問題がありました。' \r\n              : 'Microsoft認証サーバーからの応答に問題がありました。'}\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={() => navigate('/login')}\r\n          className=\"px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700\"\r\n        >\r\n          ログインページに戻る\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default MicrosoftCallback;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}