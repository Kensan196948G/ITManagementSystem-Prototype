{"ast":null,"code":"var _jsxFileName = \"F:\\\\kitting\\\\ITManagementSystem\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// 認証コンテキストの作成\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// 開発用のモックユーザー\nconst MOCK_USER = {\n  id: '1',\n  first_name: '太郎',\n  last_name: '山田',\n  email: 'taro.yamada@example.com',\n  role: 'システム管理者',\n  department: 'IT部門',\n  permissions: ['admin', 'read', 'write']\n};\n\n// 認証プロバイダーコンポーネント\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 開発モード: ユーザー認証状態の確認\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          // 開発モード: モックユーザーデータをセット\n          setCurrentUser(MOCK_USER);\n        } catch (err) {\n          console.error('認証エラー:', err);\n          localStorage.removeItem('token');\n          setCurrentUser(null);\n        }\n      }\n      setLoading(false);\n    };\n\n    // 1秒後に認証状態チェックを模擬（ロード中の表示確認用）\n    setTimeout(() => {\n      checkAuthStatus();\n    }, 1000);\n  }, []);\n\n  // 開発モード: ログイン関数\n  const login = async (username, password) => {\n    try {\n      setError(null);\n\n      // 開発モード: 簡易的な認証チェック\n      if (username && password) {\n        // モックトークンとユーザー情報を設定\n        const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\n        localStorage.setItem('token', token);\n        setCurrentUser(MOCK_USER);\n        return true;\n      } else {\n        throw new Error('ユーザー名とパスワードを入力してください');\n      }\n    } catch (err) {\n      console.error('ログインエラー:', err);\n      setError(err.message || 'ログインに失敗しました。');\n      return false;\n    }\n  };\n\n  // 開発モード: ログアウト関数\n  const logout = () => {\n    localStorage.removeItem('token');\n    setCurrentUser(null);\n    console.log('ログアウトしました');\n  };\n\n  // 提供する値\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    logout,\n    isAuthenticated: !!currentUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 10\n  }, this);\n};\n\n// カスタムフック\n_s(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","MOCK_USER","id","first_name","last_name","email","role","department","permissions","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","checkAuthStatus","token","localStorage","getItem","err","console","removeItem","setTimeout","login","username","password","Math","random","toString","substring","setItem","Error","message","logout","log","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["F:/kitting/ITManagementSystem/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// 認証コンテキストの作成\r\nconst AuthContext = createContext();\r\n\r\n// 開発用のモックユーザー\r\nconst MOCK_USER = {\r\n  id: '1',\r\n  first_name: '太郎',\r\n  last_name: '山田',\r\n  email: 'taro.yamada@example.com',\r\n  role: 'システム管理者',\r\n  department: 'IT部門',\r\n  permissions: ['admin', 'read', 'write']\r\n};\r\n\r\n// 認証プロバイダーコンポーネント\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 開発モード: ユーザー認証状態の確認\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        try {\r\n          // 開発モード: モックユーザーデータをセット\r\n          setCurrentUser(MOCK_USER);\r\n        } catch (err) {\r\n          console.error('認証エラー:', err);\r\n          localStorage.removeItem('token');\r\n          setCurrentUser(null);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    // 1秒後に認証状態チェックを模擬（ロード中の表示確認用）\r\n    setTimeout(() => {\r\n      checkAuthStatus();\r\n    }, 1000);\r\n  }, []);\r\n\r\n  // 開発モード: ログイン関数\r\n  const login = async (username, password) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // 開発モード: 簡易的な認証チェック\r\n      if (username && password) {\r\n        // モックトークンとユーザー情報を設定\r\n        const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\r\n        localStorage.setItem('token', token);\r\n        setCurrentUser(MOCK_USER);\r\n        return true;\r\n      } else {\r\n        throw new Error('ユーザー名とパスワードを入力してください');\r\n      }\r\n    } catch (err) {\r\n      console.error('ログインエラー:', err);\r\n      setError(err.message || 'ログインに失敗しました。');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 開発モード: ログアウト関数\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setCurrentUser(null);\r\n    console.log('ログアウトしました');\r\n  };\r\n\r\n  // 提供する値\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!currentUser\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// カスタムフック\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}