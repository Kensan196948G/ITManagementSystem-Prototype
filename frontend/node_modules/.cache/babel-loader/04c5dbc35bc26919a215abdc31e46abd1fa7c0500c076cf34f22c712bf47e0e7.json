{"ast":null,"code":"import React,{useEffect,useState}from'react';import{useNavigate,useLocation}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const MicrosoftCallback=()=>{const navigate=useNavigate();const location=useLocation();const{loginWithMicrosoft}=useAuth();const[error,setError]=useState(null);const[loading,setLoading]=useState(true);const[authType,setAuthType]=useState('microsoft');// 'microsoft' または 'hengeoine'\n// Microsoft認証設定\nconst msAuthConfig={clientId:process.env.REACT_APP_MS_CLIENT_ID||'12345678-1234-1234-1234-123456789012',// 環境変数から取得、またはテスト用の代替ID\nredirectUri:'https://localhost:3000/microsoft-callback',// Azure ADに登録済みのフロントエンドURL\nauthority:`https://login.microsoftonline.com/${process.env.REACT_APP_MS_TENANT_ID||'common'}`,// テナントIDを使用\nscopes:['openid','profile','email','User.Read']};useEffect(()=>{const handleAuth=async()=>{try{// URLクエリパラメータから認証情報を取得\nconst queryParams=new URLSearchParams(location.search);const code=queryParams.get('code');const error=queryParams.get('error');const errorDescription=queryParams.get('error_description');const sessionState=queryParams.get('session_state');// エラーパラメータの確認\nif(error){console.error('認証エラー:',errorDescription||error);// エラーメッセージを表示\nsetError(`認証エラー: ${errorDescription||error}`);setLoading(false);return;}// 認証コードがない場合\nif(!code){throw new Error('認証コードが取得できませんでした。');}// 開発用: コンソールに認証コードの存在を記録\nconsole.log('認証コードを受信しました');console.log('セッション状態:',sessionState);// 実際の環境では、この認証コードを使ってトークンを取得し、\n// Microsoft Graph APIでユーザー情報を取得します\n// 実際のログイン情報に近い模擬ユーザー情報を生成\n// 注: 実環境では認証コードを使ってトークンを取得し、\n//    そのトークンでGraph APIからこれらの情報を取得します\n// 実際のリクエスト情報から得られるユーザー情報（モック）\nconst email=queryParams.get('login_hint')||'taro.yamada@contoso.com';const state=queryParams.get('state')||'';// セッション情報からユーザーIDを生成\nconst userId=sessionState?sessionState.substring(0,8):code.substring(0,8);// 実際のMicrosoft Entra IDから返ってくるユーザー情報に近いデータを構築\nconst mockUserData={account:{// Graph APIから返されるユーザー表示名（Microsoft Entra IDに登録された名前）\nname:'山田 太郎',// Microsoft Entra IDに登録されている実際の表示名\n// 認証に使用したメールアドレス（UPN）\nusername:email,// アカウント識別子\nhomeAccountId:`${userId}.a7232f7a-a9e5-4f71-9372-dc8b1c6645ea`,// アカウント環境（組織名など）\nenvironment:'Microsoft Entra ID',tenantId:'a7232f7a-a9e5-4f71-9372-dc8b1c6645ea'},// 開発環境用のアクセストークン\naccessToken:`eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.${code.substring(0,10)}`};console.log('認証ユーザー情報:',{displayName:mockUserData.account.name,userPrincipalName:mockUserData.account.username,environment:mockUserData.account.environment});// 認証処理（模擬データを渡す）\nconst success=await loginWithMicrosoft(mockUserData);if(success){// 認証成功\nnavigate('/dashboard');}else{throw new Error('認証に失敗しました');}}catch(err){console.error('認証エラー:',err);setError(err.message||'認証処理中にエラーが発生しました');setLoading(false);}};handleAuth();},[loginWithMicrosoft,navigate,location]);if(loading){return/*#__PURE__*/_jsxs(\"div\",{className:\"min-h-screen flex flex-col items-center justify-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"mb-4\",children:/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600\"})}),/*#__PURE__*/_jsxs(\"h2\",{className:\"text-xl font-semibold text-secondary-700\",children:[authType==='hengeoine'?'HENGEOINE認証':'Microsoft認証',\"\\u51E6\\u7406\\u4E2D...\"]}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-2 text-secondary-500\",children:\"\\u3057\\u3070\\u3089\\u304F\\u304A\\u5F85\\u3061\\u304F\\u3060\\u3055\\u3044\"}),authType==='hengeoine'&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-4 max-w-md text-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-blue-50 border border-blue-200 rounded p-3\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-xs px-1 py-0.5 bg-blue-100 text-blue-800 rounded-sm\",children:\"HENGEOINE\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-blue-800 mt-1\",children:\"\\u30D5\\u30A7\\u30C7\\u30EC\\u30FC\\u30B7\\u30E7\\u30F3\\u8A8D\\u8A3C\\u304B\\u3089\\u306E\\u30B3\\u30FC\\u30EB\\u30D0\\u30C3\\u30AF\\u3092\\u51E6\\u7406\\u3057\\u3066\\u3044\\u307E\\u3059\"})]})})]});}if(error){return/*#__PURE__*/_jsxs(\"div\",{className:\"min-h-screen flex flex-col items-center justify-center p-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 max-w-md\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center mb-2\",children:authType==='hengeoine'?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-xs px-1 py-0.5 bg-blue-100 text-blue-800 rounded-sm mr-2\",children:\"HENGEOINE\"}),/*#__PURE__*/_jsx(\"p\",{className:\"font-bold\",children:\"\\u30D5\\u30A7\\u30C7\\u30EC\\u30FC\\u30B7\\u30E7\\u30F3\\u8A8D\\u8A3C\\u30A8\\u30E9\\u30FC\"})]}):/*#__PURE__*/_jsx(\"p\",{className:\"font-bold\",children:\"Microsoft\\u8A8D\\u8A3C\\u30A8\\u30E9\\u30FC\"})}),/*#__PURE__*/_jsx(\"p\",{children:error}),/*#__PURE__*/_jsx(\"p\",{className:\"text-xs mt-2 text-red-600\",children:authType==='hengeoine'?'HENGEOINE認証サーバーからの応答に問題がありました。':'Microsoft認証サーバーからの応答に問題がありました。'})]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>navigate('/login'),className:\"px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700\",children:\"\\u30ED\\u30B0\\u30A4\\u30F3\\u30DA\\u30FC\\u30B8\\u306B\\u623B\\u308B\"})]});}return null;};export default MicrosoftCallback;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","useAuth","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","MicrosoftCallback","navigate","location","loginWithMicrosoft","error","setError","loading","setLoading","authType","setAuthType","msAuthConfig","clientId","process","env","REACT_APP_MS_CLIENT_ID","redirectUri","authority","REACT_APP_MS_TENANT_ID","scopes","handleAuth","queryParams","URLSearchParams","search","code","get","errorDescription","sessionState","console","Error","log","email","state","userId","substring","mockUserData","account","name","username","homeAccountId","environment","tenantId","accessToken","displayName","userPrincipalName","success","err","message","className","children","onClick"],"sources":["F:/kitting/ITManagementSystem/frontend/src/pages/MicrosoftCallback.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\nconst MicrosoftCallback = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { loginWithMicrosoft } = useAuth();\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [authType, setAuthType] = useState('microsoft'); // 'microsoft' または 'hengeoine'\r\n  \r\n  // Microsoft認証設定\r\n  const msAuthConfig = {\r\n    clientId: process.env.REACT_APP_MS_CLIENT_ID || '12345678-1234-1234-1234-123456789012', // 環境変数から取得、またはテスト用の代替ID\r\n    redirectUri: 'https://localhost:3000/microsoft-callback', // Azure ADに登録済みのフロントエンドURL\r\n    authority: `https://login.microsoftonline.com/${process.env.REACT_APP_MS_TENANT_ID || 'common'}`, // テナントIDを使用\r\n    scopes: ['openid', 'profile', 'email', 'User.Read']\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleAuth = async () => {\r\n      try {\r\n        // URLクエリパラメータから認証情報を取得\r\n        const queryParams = new URLSearchParams(location.search);\r\n        const code = queryParams.get('code');\r\n        const error = queryParams.get('error');\r\n        const errorDescription = queryParams.get('error_description');\r\n        const sessionState = queryParams.get('session_state');\r\n        \r\n        // エラーパラメータの確認\r\n        if (error) {\r\n          console.error('認証エラー:', errorDescription || error);\r\n          \r\n          // エラーメッセージを表示\r\n          setError(`認証エラー: ${errorDescription || error}`);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n        \r\n        // 認証コードがない場合\r\n        if (!code) {\r\n          throw new Error('認証コードが取得できませんでした。');\r\n        }\r\n        \r\n        // 開発用: コンソールに認証コードの存在を記録\r\n        console.log('認証コードを受信しました');\r\n        console.log('セッション状態:', sessionState);\r\n        \r\n        // 実際の環境では、この認証コードを使ってトークンを取得し、\r\n        // Microsoft Graph APIでユーザー情報を取得します\r\n        \r\n        // 実際のログイン情報に近い模擬ユーザー情報を生成\r\n        // 注: 実環境では認証コードを使ってトークンを取得し、\r\n        //    そのトークンでGraph APIからこれらの情報を取得します\r\n        \r\n        // 実際のリクエスト情報から得られるユーザー情報（モック）\r\n        const email = queryParams.get('login_hint') || 'taro.yamada@contoso.com';\r\n        const state = queryParams.get('state') || '';\r\n        \r\n        // セッション情報からユーザーIDを生成\r\n        const userId = sessionState ? \r\n          sessionState.substring(0, 8) : \r\n          code.substring(0, 8);\r\n        \r\n        // 実際のMicrosoft Entra IDから返ってくるユーザー情報に近いデータを構築\r\n        const mockUserData = {\r\n          account: {\r\n            // Graph APIから返されるユーザー表示名（Microsoft Entra IDに登録された名前）\r\n            name: '山田 太郎',  // Microsoft Entra IDに登録されている実際の表示名\r\n            // 認証に使用したメールアドレス（UPN）\r\n            username: email,\r\n            // アカウント識別子\r\n            homeAccountId: `${userId}.a7232f7a-a9e5-4f71-9372-dc8b1c6645ea`,\r\n            // アカウント環境（組織名など）\r\n            environment: 'Microsoft Entra ID',\r\n            tenantId: 'a7232f7a-a9e5-4f71-9372-dc8b1c6645ea'\r\n          },\r\n          // 開発環境用のアクセストークン\r\n          accessToken: `eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.${code.substring(0, 10)}`\r\n        };\r\n        \r\n        console.log('認証ユーザー情報:', {\r\n          displayName: mockUserData.account.name,\r\n          userPrincipalName: mockUserData.account.username,\r\n          environment: mockUserData.account.environment\r\n        });\r\n        \r\n        // 認証処理（模擬データを渡す）\r\n        const success = await loginWithMicrosoft(mockUserData);\r\n        \r\n        if (success) {\r\n          // 認証成功\r\n          navigate('/dashboard');\r\n        } else {\r\n          throw new Error('認証に失敗しました');\r\n        }\r\n      } catch (err) {\r\n        console.error('認証エラー:', err);\r\n        setError(err.message || '認証処理中にエラーが発生しました');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    handleAuth();\r\n  }, [loginWithMicrosoft, navigate, location]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen flex flex-col items-center justify-center\">\r\n        <div className=\"mb-4\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600\"></div>\r\n        </div>\r\n        <h2 className=\"text-xl font-semibold text-secondary-700\">\r\n          {authType === 'hengeoine' ? 'HENGEOINE認証' : 'Microsoft認証'}処理中...\r\n        </h2>\r\n        <p className=\"mt-2 text-secondary-500\">しばらくお待ちください</p>\r\n        \r\n        {authType === 'hengeoine' && (\r\n          <div className=\"mt-4 max-w-md text-center\">\r\n            <div className=\"bg-blue-50 border border-blue-200 rounded p-3\">\r\n              <span className=\"text-xs px-1 py-0.5 bg-blue-100 text-blue-800 rounded-sm\">HENGEOINE</span>\r\n              <p className=\"text-sm text-blue-800 mt-1\">\r\n                フェデレーション認証からのコールバックを処理しています\r\n              </p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen flex flex-col items-center justify-center p-4\">\r\n        <div className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 max-w-md\">\r\n          <div className=\"flex items-center mb-2\">\r\n            {authType === 'hengeoine' ? (\r\n              <>\r\n                <span className=\"text-xs px-1 py-0.5 bg-blue-100 text-blue-800 rounded-sm mr-2\">HENGEOINE</span>\r\n                <p className=\"font-bold\">フェデレーション認証エラー</p>\r\n              </>\r\n            ) : (\r\n              <p className=\"font-bold\">Microsoft認証エラー</p>\r\n            )}\r\n          </div>\r\n          <p>{error}</p>\r\n          <p className=\"text-xs mt-2 text-red-600\">\r\n            {authType === 'hengeoine' \r\n              ? 'HENGEOINE認証サーバーからの応答に問題がありました。' \r\n              : 'Microsoft認証サーバーからの応答に問題がありました。'}\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={() => navigate('/login')}\r\n          className=\"px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700\"\r\n        >\r\n          ログインページに戻る\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default MicrosoftCallback;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}