{"ast":null,"code":"var _jsxFileName = \"F:\\\\kitting\\\\ITManagementSystem-Prototype\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// 認証コンテキストの作成\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// 開発用のモックユーザーロール\nconst USER_ROLES = {\n  GLOBAL_ADMIN: 'グローバル管理者',\n  GENERAL_USER: '一般ユーザー',\n  GUEST: 'ゲスト'\n};\n\n// 開発用のモックユーザーデータ\nconst MOCK_USERS = {\n  'admin': {\n    id: '1',\n    first_name: '太郎',\n    last_name: '山田',\n    email: 'taro.yamada@example.com',\n    role: USER_ROLES.GLOBAL_ADMIN,\n    department: 'IT部門',\n    permissions: ['admin', 'read', 'write', 'api_management'],\n    avatar: 'https://i.pravatar.cc/150?img=1'\n  },\n  'user': {\n    id: '2',\n    first_name: '一郎',\n    last_name: '鈴木',\n    email: 'ichiro.suzuki@example.com',\n    role: USER_ROLES.GENERAL_USER,\n    department: 'IT部門',\n    permissions: ['read', 'write'],\n    avatar: 'https://i.pravatar.cc/150?img=2'\n  },\n  'guest': {\n    id: '3',\n    first_name: '次郎',\n    last_name: '佐藤',\n    email: 'jiro.sato@example.com',\n    role: USER_ROLES.GUEST,\n    department: '営業部',\n    permissions: ['read'],\n    avatar: 'https://i.pravatar.cc/150?img=3'\n  }\n};\n\n// 認証プロバイダーコンポーネント\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 開発モード: ユーザー認証状態の確認\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      // 開発モードフラグ - バックエンドが動作しない環境でのテスト用\n      const DEV_MODE = true;\n\n      // 通常の認証チェック\n      const token = localStorage.getItem('token');\n      const userRole = localStorage.getItem('userRole');\n      if (token && userRole) {\n        try {\n          if (MOCK_USERS[userRole]) {\n            // モックユーザーデータをセット\n            setCurrentUser(MOCK_USERS[userRole]);\n          }\n        } catch (err) {\n          console.error('認証エラー:', err);\n          localStorage.removeItem('token');\n          localStorage.removeItem('userRole');\n          setCurrentUser(null);\n        }\n      } else if (DEV_MODE) {\n        // 開発モードでユーザー情報がない場合は、デフォルトユーザーを設定\n        const defaultUser = {\n          id: 'dev-user',\n          first_name: '開発',\n          last_name: 'ユーザー',\n          email: 'dev@example.com',\n          role: USER_ROLES.GENERAL_USER,\n          department: '開発部門',\n          permissions: ['read', 'write', 'api_access']\n        };\n        console.log('開発モード: デフォルトユーザーを設定', defaultUser);\n        setCurrentUser(defaultUser);\n      }\n      setLoading(false);\n    };\n\n    // 認証状態チェックを即時実行（開発モードではすぐに認証完了状態にする）\n    checkAuthStatus();\n  }, []);\n\n  // レポート購読設定関数\n  const subscribeToReports = async (reportTypes = [], frequency = 'weekly') => {\n    try {\n      setError(null);\n\n      // APIコールをシミュレート\n      console.log(`レポート購読設定: タイプ=${reportTypes.join(',')}, 頻度=${frequency}`);\n\n      // 成功メッセージをコンソールに表示\n      console.log('レポート購読設定が保存されました');\n      return true;\n    } catch (err) {\n      console.error('レポート購読エラー:', err);\n      setError('レポート購読設定の保存に失敗しました。');\n      return false;\n    }\n  };\n\n  // レポート生成関数\n  const generateReport = async (reportType, period, format = 'html') => {\n    try {\n      setError(null);\n      setLoading(true);\n\n      // APIコールをシミュレート\n      console.log(`レポート生成: タイプ=${reportType}, 期間=${period}, 形式=${format}`);\n\n      // 非同期操作をシミュレート\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // レポートデータのモック作成\n      const reportData = {\n        type: reportType,\n        period: period,\n        generatedAt: new Date().toISOString(),\n        data: {\n          title: `${reportType}レポート (${period})`,\n          summary: 'これはシミュレートされたレポートデータです。',\n          url: `/reports/${reportType}_${period}.${format}`\n        }\n      };\n      console.log('レポート生成完了:', reportData);\n      setLoading(false);\n      return reportData;\n    } catch (err) {\n      console.error('レポート生成エラー:', err);\n      setError('レポート生成中にエラーが発生しました。');\n      setLoading(false);\n      return null;\n    }\n  };\n\n  // 通常ログイン関数\n  const login = async (username, password) => {\n    try {\n      setError(null);\n\n      // ログイン試行をコンソールに出力（デバッグ用）\n      console.log(`ログイン試行: username=${username}, password=${password}`);\n\n      // 入力チェック\n      if (!username || !password) {\n        console.error('入力エラー: ユーザー名またはパスワードが入力されていません');\n        throw new Error('ユーザー名とパスワードを入力してください');\n      }\n\n      // テスト用アカウントの検証\n      let userRole = null;\n\n      // 厳密な比較で検証\n      if (username === 'admin' && password === 'admin') {\n        console.log('管理者アカウントでのログイン成功');\n        userRole = 'admin'; // グローバル管理者\n      } else if (username === 'user' && password === 'user') {\n        console.log('一般ユーザーアカウントでのログイン成功');\n        userRole = 'user'; // 一般ユーザー\n      } else if (username === 'guest' && password === 'guest') {\n        console.log('ゲストアカウントでのログイン成功');\n        userRole = 'guest'; // ゲスト\n      } else {\n        console.error(`ログイン認証失敗: ユーザー ${username} は認証されませんでした`);\n        throw new Error('ユーザー名またはパスワードが正しくありません');\n      }\n\n      // モックトークンとユーザー情報を設定\n      const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\n      localStorage.setItem('token', token);\n      localStorage.setItem('userRole', userRole);\n\n      // ユーザー情報を設定\n      console.log(`ユーザー情報設定: ${userRole}`, MOCK_USERS[userRole]);\n      setCurrentUser(MOCK_USERS[userRole]);\n      console.log(`ログイン成功: ${username} (${userRole}) - トークン: ${token}`);\n      return true;\n    } catch (err) {\n      console.error('ログインエラー:', err);\n      setError(err.message || 'ログインに失敗しました。');\n      return false;\n    }\n  };\n\n  // ログアウト関数\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userRole');\n    setCurrentUser(null);\n    console.log('ログアウトしました');\n  };\n\n  // 権限チェック関数\n  const hasPermission = permission => {\n    if (!currentUser) return false;\n    return currentUser.permissions.includes(permission);\n  };\n\n  // 提供する値\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    logout,\n    hasPermission,\n    isAuthenticated: !!currentUser,\n    USER_ROLES,\n    // ロール定数をエクスポート\n    subscribeToReports,\n    // レポート購読設定\n    generateReport // レポート生成\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 10\n  }, this);\n};\n\n// カスタムフック\n_s(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","USER_ROLES","GLOBAL_ADMIN","GENERAL_USER","GUEST","MOCK_USERS","id","first_name","last_name","email","role","department","permissions","avatar","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","checkAuthStatus","DEV_MODE","token","localStorage","getItem","userRole","err","console","removeItem","defaultUser","log","subscribeToReports","reportTypes","frequency","join","generateReport","reportType","period","format","Promise","resolve","setTimeout","reportData","type","generatedAt","Date","toISOString","data","title","summary","url","login","username","password","Error","Math","random","toString","substring","setItem","message","logout","hasPermission","permission","includes","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["F:/kitting/ITManagementSystem-Prototype/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// 認証コンテキストの作成\r\nconst AuthContext = createContext();\r\n\r\n// 開発用のモックユーザーロール\r\nconst USER_ROLES = {\r\n  GLOBAL_ADMIN: 'グローバル管理者',\r\n  GENERAL_USER: '一般ユーザー',\r\n  GUEST: 'ゲスト'\r\n};\r\n\r\n// 開発用のモックユーザーデータ\r\nconst MOCK_USERS = {\r\n  'admin': {\r\n    id: '1',\r\n    first_name: '太郎',\r\n    last_name: '山田',\r\n    email: 'taro.yamada@example.com',\r\n    role: USER_ROLES.GLOBAL_ADMIN,\r\n    department: 'IT部門',\r\n    permissions: ['admin', 'read', 'write', 'api_management'],\r\n    avatar: 'https://i.pravatar.cc/150?img=1'\r\n  },\r\n  'user': {\r\n    id: '2',\r\n    first_name: '一郎',\r\n    last_name: '鈴木',\r\n    email: 'ichiro.suzuki@example.com',\r\n    role: USER_ROLES.GENERAL_USER,\r\n    department: 'IT部門',\r\n    permissions: ['read', 'write'],\r\n    avatar: 'https://i.pravatar.cc/150?img=2'\r\n  },\r\n  'guest': {\r\n    id: '3',\r\n    first_name: '次郎',\r\n    last_name: '佐藤',\r\n    email: 'jiro.sato@example.com',\r\n    role: USER_ROLES.GUEST,\r\n    department: '営業部',\r\n    permissions: ['read'],\r\n    avatar: 'https://i.pravatar.cc/150?img=3'\r\n  }\r\n};\r\n\r\n// 認証プロバイダーコンポーネント\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 開発モード: ユーザー認証状態の確認\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      // 開発モードフラグ - バックエンドが動作しない環境でのテスト用\r\n      const DEV_MODE = true;\r\n      \r\n      // 通常の認証チェック\r\n      const token = localStorage.getItem('token');\r\n      const userRole = localStorage.getItem('userRole');\r\n      \r\n      if (token && userRole) {\r\n        try {\r\n          if (MOCK_USERS[userRole]) {\r\n            // モックユーザーデータをセット\r\n            setCurrentUser(MOCK_USERS[userRole]);\r\n          }\r\n        } catch (err) {\r\n          console.error('認証エラー:', err);\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userRole');\r\n          setCurrentUser(null);\r\n        }\r\n      } else if (DEV_MODE) {\r\n        // 開発モードでユーザー情報がない場合は、デフォルトユーザーを設定\r\n        const defaultUser = {\r\n          id: 'dev-user',\r\n          first_name: '開発',\r\n          last_name: 'ユーザー',\r\n          email: 'dev@example.com',\r\n          role: USER_ROLES.GENERAL_USER,\r\n          department: '開発部門',\r\n          permissions: ['read', 'write', 'api_access']\r\n        };\r\n        console.log('開発モード: デフォルトユーザーを設定', defaultUser);\r\n        setCurrentUser(defaultUser);\r\n      }\r\n      \r\n      setLoading(false);\r\n    };\r\n\r\n    // 認証状態チェックを即時実行（開発モードではすぐに認証完了状態にする）\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  // レポート購読設定関数\r\n  const subscribeToReports = async (reportTypes = [], frequency = 'weekly') => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // APIコールをシミュレート\r\n      console.log(`レポート購読設定: タイプ=${reportTypes.join(',')}, 頻度=${frequency}`);\r\n      \r\n      // 成功メッセージをコンソールに表示\r\n      console.log('レポート購読設定が保存されました');\r\n      return true;\r\n    } catch (err) {\r\n      console.error('レポート購読エラー:', err);\r\n      setError('レポート購読設定の保存に失敗しました。');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // レポート生成関数\r\n  const generateReport = async (reportType, period, format = 'html') => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      \r\n      // APIコールをシミュレート\r\n      console.log(`レポート生成: タイプ=${reportType}, 期間=${period}, 形式=${format}`);\r\n      \r\n      // 非同期操作をシミュレート\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      // レポートデータのモック作成\r\n      const reportData = {\r\n        type: reportType,\r\n        period: period,\r\n        generatedAt: new Date().toISOString(),\r\n        data: {\r\n          title: `${reportType}レポート (${period})`,\r\n          summary: 'これはシミュレートされたレポートデータです。',\r\n          url: `/reports/${reportType}_${period}.${format}`\r\n        }\r\n      };\r\n      \r\n      console.log('レポート生成完了:', reportData);\r\n      setLoading(false);\r\n      return reportData;\r\n    } catch (err) {\r\n      console.error('レポート生成エラー:', err);\r\n      setError('レポート生成中にエラーが発生しました。');\r\n      setLoading(false);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // 通常ログイン関数\r\n  const login = async (username, password) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // ログイン試行をコンソールに出力（デバッグ用）\r\n      console.log(`ログイン試行: username=${username}, password=${password}`);\r\n      \r\n      // 入力チェック\r\n      if (!username || !password) {\r\n        console.error('入力エラー: ユーザー名またはパスワードが入力されていません');\r\n        throw new Error('ユーザー名とパスワードを入力してください');\r\n      }\r\n      \r\n      // テスト用アカウントの検証\r\n      let userRole = null;\r\n      \r\n      // 厳密な比較で検証\r\n      if (username === 'admin' && password === 'admin') {\r\n        console.log('管理者アカウントでのログイン成功');\r\n        userRole = 'admin'; // グローバル管理者\r\n      } else if (username === 'user' && password === 'user') {\r\n        console.log('一般ユーザーアカウントでのログイン成功');\r\n        userRole = 'user'; // 一般ユーザー\r\n      } else if (username === 'guest' && password === 'guest') {\r\n        console.log('ゲストアカウントでのログイン成功');\r\n        userRole = 'guest'; // ゲスト\r\n      } else {\r\n        console.error(`ログイン認証失敗: ユーザー ${username} は認証されませんでした`);\r\n        throw new Error('ユーザー名またはパスワードが正しくありません');\r\n      }\r\n      \r\n      // モックトークンとユーザー情報を設定\r\n      const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('userRole', userRole);\r\n      \r\n      // ユーザー情報を設定\r\n      console.log(`ユーザー情報設定: ${userRole}`, MOCK_USERS[userRole]);\r\n      setCurrentUser(MOCK_USERS[userRole]);\r\n      \r\n      console.log(`ログイン成功: ${username} (${userRole}) - トークン: ${token}`);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('ログインエラー:', err);\r\n      setError(err.message || 'ログインに失敗しました。');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // ログアウト関数\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userRole');\r\n    setCurrentUser(null);\r\n    console.log('ログアウトしました');\r\n  };\r\n\r\n  // 権限チェック関数\r\n  const hasPermission = (permission) => {\r\n    if (!currentUser) return false;\r\n    return currentUser.permissions.includes(permission);\r\n  };\r\n\r\n  // 提供する値\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    hasPermission,\r\n    isAuthenticated: !!currentUser,\r\n    USER_ROLES, // ロール定数をエクスポート\r\n    subscribeToReports, // レポート購読設定\r\n    generateReport // レポート生成\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// カスタムフック\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}