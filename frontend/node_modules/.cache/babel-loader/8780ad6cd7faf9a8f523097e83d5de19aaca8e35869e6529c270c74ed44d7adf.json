{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';// 認証コンテキストの作成\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// 開発用のモックユーザーロール\nconst USER_ROLES={GLOBAL_ADMIN:'グローバル管理者',GENERAL_USER:'一般ユーザー',GUEST:'ゲスト'};// 開発用のモックユーザーデータ\nconst MOCK_USERS={'admin':{id:'1',first_name:'太郎',last_name:'山田',email:'taro.yamada@example.com',role:USER_ROLES.GLOBAL_ADMIN,department:'IT部門',permissions:['admin','read','write','api_management'],avatar:'https://i.pravatar.cc/150?img=1'},'user':{id:'2',first_name:'一郎',last_name:'鈴木',email:'ichiro.suzuki@example.com',role:USER_ROLES.GENERAL_USER,department:'IT部門',permissions:['read','write'],avatar:'https://i.pravatar.cc/150?img=2'},'guest':{id:'3',first_name:'次郎',last_name:'佐藤',email:'jiro.sato@example.com',role:USER_ROLES.GUEST,department:'営業部',permissions:['read'],avatar:'https://i.pravatar.cc/150?img=3'}};// 認証プロバイダーコンポーネント\nexport const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// 開発モード: ユーザー認証状態の確認\nuseEffect(()=>{const checkAuthStatus=async()=>{const token=localStorage.getItem('token');const userRole=localStorage.getItem('userRole');if(token&&userRole&&MOCK_USERS[userRole]){try{// 開発モード: モックユーザーデータをセット\nsetCurrentUser(MOCK_USERS[userRole]);}catch(err){console.error('認証エラー:',err);localStorage.removeItem('token');localStorage.removeItem('userRole');setCurrentUser(null);}}setLoading(false);};// 1秒後に認証状態チェックを模擬（ロード中の表示確認用）\nsetTimeout(()=>{checkAuthStatus();},1000);},[]);// Microsoft認証をシミュレートするログイン関数\nconst loginWithMicrosoft=async()=>{try{setError(null);setLoading(true);// 開発モード: Microsoft認証をシミュレート\nconst token='mock-ms-token-'+Math.random().toString(36).substring(2);// デフォルトでは管理者アカウントでログイン\nconst userRole='admin';localStorage.setItem('token',token);localStorage.setItem('userRole',userRole);setCurrentUser(MOCK_USERS[userRole]);setLoading(false);return true;}catch(err){console.error('Microsoft認証エラー:',err);setError('Microsoft認証に失敗しました。再度お試しください。');setLoading(false);return false;}};// 通常ログイン関数\nconst login=async(username,password)=>{try{setError(null);// 開発モード: 簡易的な認証チェック\nif(!username||!password){throw new Error('ユーザー名とパスワードを入力してください');}// テスト用アカウントの検証\nlet validLogin=false;let userRole;// 簡易的なパスワード検証（テスト用）\nif(username==='admin'&&password==='admin'){validLogin=true;userRole='admin';// グローバル管理者\n}else if(username==='user'&&password==='user'){validLogin=true;userRole='user';// 一般ユーザー\n}else if(username==='guest'&&password==='guest'){validLogin=true;userRole='guest';// ゲスト\n}if(!validLogin){throw new Error('ユーザー名またはパスワードが正しくありません');}// モックトークンとユーザー情報を設定\nconst token='mock-jwt-token-'+Math.random().toString(36).substring(2);localStorage.setItem('token',token);localStorage.setItem('userRole',userRole);setCurrentUser(MOCK_USERS[userRole]);console.log(`ログイン成功: ${username} (${userRole})`);return true;}catch(err){console.error('ログインエラー:',err);setError(err.message||'ログインに失敗しました。');return false;}};// ログアウト関数\nconst logout=()=>{localStorage.removeItem('token');localStorage.removeItem('userRole');setCurrentUser(null);console.log('ログアウトしました');};// 権限チェック関数\nconst hasPermission=permission=>{if(!currentUser)return false;return currentUser.permissions.includes(permission);};// 提供する値\nconst value={currentUser,loading,error,login,loginWithMicrosoft,logout,hasPermission,isAuthenticated:!!currentUser,USER_ROLES// ロール定数をエクスポート\n};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// カスタムフック\nexport const useAuth=()=>{return useContext(AuthContext);};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","AuthContext","USER_ROLES","GLOBAL_ADMIN","GENERAL_USER","GUEST","MOCK_USERS","id","first_name","last_name","email","role","department","permissions","avatar","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","error","setError","checkAuthStatus","token","localStorage","getItem","userRole","err","console","removeItem","setTimeout","loginWithMicrosoft","Math","random","toString","substring","setItem","login","username","password","Error","validLogin","log","message","logout","hasPermission","permission","includes","value","isAuthenticated","Provider","useAuth"],"sources":["F:/kitting/ITManagementSystem/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// 認証コンテキストの作成\r\nconst AuthContext = createContext();\r\n\r\n// 開発用のモックユーザーロール\r\nconst USER_ROLES = {\r\n  GLOBAL_ADMIN: 'グローバル管理者',\r\n  GENERAL_USER: '一般ユーザー',\r\n  GUEST: 'ゲスト'\r\n};\r\n\r\n// 開発用のモックユーザーデータ\r\nconst MOCK_USERS = {\r\n  'admin': {\r\n    id: '1',\r\n    first_name: '太郎',\r\n    last_name: '山田',\r\n    email: 'taro.yamada@example.com',\r\n    role: USER_ROLES.GLOBAL_ADMIN,\r\n    department: 'IT部門',\r\n    permissions: ['admin', 'read', 'write', 'api_management'],\r\n    avatar: 'https://i.pravatar.cc/150?img=1'\r\n  },\r\n  'user': {\r\n    id: '2',\r\n    first_name: '一郎',\r\n    last_name: '鈴木',\r\n    email: 'ichiro.suzuki@example.com',\r\n    role: USER_ROLES.GENERAL_USER,\r\n    department: 'IT部門',\r\n    permissions: ['read', 'write'],\r\n    avatar: 'https://i.pravatar.cc/150?img=2'\r\n  },\r\n  'guest': {\r\n    id: '3',\r\n    first_name: '次郎',\r\n    last_name: '佐藤',\r\n    email: 'jiro.sato@example.com',\r\n    role: USER_ROLES.GUEST,\r\n    department: '営業部',\r\n    permissions: ['read'],\r\n    avatar: 'https://i.pravatar.cc/150?img=3'\r\n  }\r\n};\r\n\r\n// 認証プロバイダーコンポーネント\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 開発モード: ユーザー認証状態の確認\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const userRole = localStorage.getItem('userRole');\r\n      \r\n      if (token && userRole && MOCK_USERS[userRole]) {\r\n        try {\r\n          // 開発モード: モックユーザーデータをセット\r\n          setCurrentUser(MOCK_USERS[userRole]);\r\n        } catch (err) {\r\n          console.error('認証エラー:', err);\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userRole');\r\n          setCurrentUser(null);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    // 1秒後に認証状態チェックを模擬（ロード中の表示確認用）\r\n    setTimeout(() => {\r\n      checkAuthStatus();\r\n    }, 1000);\r\n  }, []);\r\n\r\n  // Microsoft認証をシミュレートするログイン関数\r\n  const loginWithMicrosoft = async () => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      \r\n      // 開発モード: Microsoft認証をシミュレート\r\n      const token = 'mock-ms-token-' + Math.random().toString(36).substring(2);\r\n      \r\n      // デフォルトでは管理者アカウントでログイン\r\n      const userRole = 'admin';\r\n      \r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('userRole', userRole);\r\n      setCurrentUser(MOCK_USERS[userRole]);\r\n      setLoading(false);\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error('Microsoft認証エラー:', err);\r\n      setError('Microsoft認証に失敗しました。再度お試しください。');\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 通常ログイン関数\r\n  const login = async (username, password) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // 開発モード: 簡易的な認証チェック\r\n      if (!username || !password) {\r\n        throw new Error('ユーザー名とパスワードを入力してください');\r\n      }\r\n      \r\n      // テスト用アカウントの検証\r\n      let validLogin = false;\r\n      let userRole;\r\n      \r\n      // 簡易的なパスワード検証（テスト用）\r\n      if (username === 'admin' && password === 'admin') {\r\n        validLogin = true;\r\n        userRole = 'admin'; // グローバル管理者\r\n      } else if (username === 'user' && password === 'user') {\r\n        validLogin = true;\r\n        userRole = 'user'; // 一般ユーザー\r\n      } else if (username === 'guest' && password === 'guest') {\r\n        validLogin = true;\r\n        userRole = 'guest'; // ゲスト\r\n      }\r\n      \r\n      if (!validLogin) {\r\n        throw new Error('ユーザー名またはパスワードが正しくありません');\r\n      }\r\n      \r\n      // モックトークンとユーザー情報を設定\r\n      const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('userRole', userRole);\r\n      setCurrentUser(MOCK_USERS[userRole]);\r\n      \r\n      console.log(`ログイン成功: ${username} (${userRole})`);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('ログインエラー:', err);\r\n      setError(err.message || 'ログインに失敗しました。');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // ログアウト関数\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userRole');\r\n    setCurrentUser(null);\r\n    console.log('ログアウトしました');\r\n  };\r\n\r\n  // 権限チェック関数\r\n  const hasPermission = (permission) => {\r\n    if (!currentUser) return false;\r\n    return currentUser.permissions.includes(permission);\r\n  };\r\n\r\n  // 提供する値\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    login,\r\n    loginWithMicrosoft,\r\n    logout,\r\n    hasPermission,\r\n    isAuthenticated: !!currentUser,\r\n    USER_ROLES // ロール定数をエクスポート\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// カスタムフック\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}