from flask import Flask, jsonify, request, session
from flask_cors import CORS
from db_flask import db, db_session
from config import Config
from routes.auth import auth_bp
import os

# Create Flask application
app = Flask(__name__)
app.config.from_object(Config)

# Enable CORS for all routes with credentials support
CORS(app, 
     origins=["http://localhost:3000", "http://localhost:5173", "http://192.168.3.135:3000"],
     supports_credentials=True,
     allow_headers=["Content-Type", "Authorization"],
     methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"])

# Initialize database
db.init_app(app)

# Register authentication blueprint
app.register_blueprint(auth_bp, url_prefix='/api')

# セッションのクリーンアップ
@app.teardown_appcontext
def shutdown_session(exception=None):
    db_session.remove()

# Health check endpoint
@app.route('/api/health', methods=['GET'])
def health_check():
    """
    Basic health check endpoint
    """
    return jsonify({
        "status": "healthy",
        "message": "IT Management System Backend is running",
        "version": "1.0.0"
    })

# Status endpoint
@app.route('/api/status', methods=['GET'])
def get_status():
    """
    System status endpoint
    """
    return jsonify({
        "status": "ok",
        "database": "connected",
        "environment": os.environ.get('FLASK_ENV', 'development')
    })

# Basic incidents endpoint
@app.route('/api/incidents', methods=['GET'])
def get_incidents():
    """
    Get all incidents (placeholder)
    """
    # Placeholder data - replace with actual database queries when models are ready
    sample_incidents = [
        {
            "id": 1,
            "title": "Server connectivity issue",
            "status": "open",
            "priority": "high",
            "created_at": "2025-08-25T10:00:00Z"
        },
        {
            "id": 2,
            "title": "Email system down",
            "status": "in_progress", 
            "priority": "critical",
            "created_at": "2025-08-25T09:30:00Z"
        }
    ]
    return jsonify({
        "incidents": sample_incidents,
        "total": len(sample_incidents)
    })

@app.route('/api/incidents', methods=['POST'])
def create_incident():
    """
    Create a new incident (placeholder)
    """
    data = request.get_json()
    
    if not data:
        return jsonify({"error": "No data provided"}), 400
    
    # Basic validation
    required_fields = ['title', 'description']
    for field in required_fields:
        if field not in data:
            return jsonify({"error": f"Missing required field: {field}"}), 400
    
    # Placeholder response - replace with actual database insert
    new_incident = {
        "id": 3,  # This would be auto-generated by database
        "title": data.get('title'),
        "description": data.get('description'),
        "status": "open",
        "priority": data.get('priority', 'medium'),
        "created_at": "2025-08-25T12:00:00Z"
    }
    
    return jsonify({
        "message": "Incident created successfully",
        "incident": new_incident
    }), 201

# Basic problems endpoint
@app.route('/api/problems', methods=['GET'])
def get_problems():
    """
    Get all problems (placeholder)
    """
    sample_problems = [
        {
            "id": 1,
            "title": "Network latency issues",
            "status": "investigating",
            "priority": "medium",
            "created_at": "2025-08-24T15:30:00Z"
        }
    ]
    return jsonify({
        "problems": sample_problems,
        "total": len(sample_problems)
    })

# Basic users endpoint
@app.route('/api/users', methods=['GET'])
def get_users():
    """
    Get all users (placeholder)
    """
    sample_users = [
        {
            "id": 1,
            "username": "admin",
            "email": "admin@example.com",
            "role": "administrator"
        },
        {
            "id": 2,
            "username": "user1",
            "email": "user1@example.com", 
            "role": "user"
        }
    ]
    return jsonify({
        "users": sample_users,
        "total": len(sample_users)
    })

# Test database connection
@app.route('/api/db-test', methods=['GET'])
def test_database():
    """
    Test database connection
    """
    try:
        # Simple test query using text() for modern SQLAlchemy
        from sqlalchemy import text
        with db.engine.connect() as connection:
            connection.execute(text('SELECT 1'))
        return jsonify({
            "database": "connected",
            "message": "Database connection successful"
        })
    except Exception as e:
        return jsonify({
            "database": "disconnected",
            "error": str(e)
        }), 500

# Error handlers
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Endpoint not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "Internal server error"}), 500

def create_tables():
    """
    Create database tables if they don't exist
    """
    try:
        with app.app_context():
            db.create_all()
            print("Database tables created successfully")
    except Exception as e:
        print(f"Error creating database tables: {e}")

if __name__ == '__main__':
    # Create tables on startup
    create_tables()
    
    # Run the application
    print("Starting IT Management System Backend...")
    print(f"Server will run on http://0.0.0.0:8000")
    print("Available endpoints:")
    print("  POST /api/auth/login - User login")
    print("  POST /api/auth/logout - User logout")
    print("  GET  /api/auth/me - Get current user")
    print("  GET  /api/health - Health check")
    print("  GET  /api/status - System status")
    print("  GET  /api/incidents - List incidents")
    print("  POST /api/incidents - Create incident")
    print("  GET  /api/problems - List problems")
    print("  GET  /api/users - List users")
    print("  GET  /api/db-test - Test database connection")
    
    app.run(
        host='0.0.0.0',
        port=8000,
        debug=True
    )