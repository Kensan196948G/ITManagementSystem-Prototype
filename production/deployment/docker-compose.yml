# ITマネジメントシステム 本番環境Docker Compose設定

version: '3.8'

services:
  # フロントエンドサービス
  frontend:
    image: ${REGISTRY_URL}/it-management-frontend:${TAG_VERSION}
    restart: always
    depends_on:
      - backend
    networks:
      - frontend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # バックエンドAPIサービス  
  backend:
    image: ${REGISTRY_URL}/it-management-backend:${TAG_VERSION}
    restart: always
    env_file:
      - ../config/.env.production
    depends_on:
      - db
    networks:
      - frontend-network
      - backend-network
    volumes:
      - backend-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # リバースプロキシ
  nginx:
    image: nginx:stable-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../security/certificates:/etc/nginx/ssl:ro
      - frontend-static:/usr/share/nginx/html:ro
    depends_on:
      - frontend
      - backend
    networks:
      - frontend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # データベース
  db:
    image: mcr.microsoft.com/azure-sql-edge:latest
    restart: always
    env_file:
      - ../config/.env.production
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${DB_PASSWORD}
    volumes:
      - db-data:/var/opt/mssql
      - ../database/init:/docker-entrypoint-initdb.d
    networks:
      - backend-network
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${DB_PASSWORD} -Q "SELECT 1" -b -o /dev/null
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # モニタリング - Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # モニタリング - Grafana
  grafana:
    image: grafana/grafana:latest
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
      - loki
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ログ管理 - Loki
  loki:
    image: grafana/loki:latest
    restart: always
    volumes:
      - ../monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ログ収集 - Promtail
  promtail:
    image: grafana/promtail:latest
    restart: always
    volumes:
      - ../monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - backend-logs:/var/log/app:ro
      - /var/log:/var/log:ro
    depends_on:
      - loki
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # アラート管理 - Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    restart: always
    volumes:
      - ../monitoring/alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    depends_on:
      - prometheus
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
    internal: true  # 外部からのアクセスを禁止
  monitoring-network:
    driver: bridge
    internal: true  # 外部からのアクセスを禁止

volumes:
  db-data:
  backend-logs:
  frontend-static:
  prometheus-data:
  grafana-data:
  loki-data:
  alertmanager-data: