default_mode: orchestrator

auto_approval: true
auto_approval_messages:
  - "実行中も続行"
  - "コマンド実行"
  - "ビルドを開始します"
  - "修復を試みます"
  - "自動生成を行います"

shell_integration:
  enabled: true
  terminal_type: "vscode"

safe_commands:
  - "*"

dangerous_commands:
  - rm
  - del
  - rmdir
  - shutdown
  - format
  - curl
  - wget
  - "mv /"
  - dd
  - mkfs
  - scp
  - Invoke-WebRequest
  - Start-Process

global_policy:
  max_retry: 7
  retry_loop_enabled: true
  on_failure: "再試行後も失敗する場合はエラー内容をマークして保持"

custom_instructions:
  Code: |
    🧠 **Codeモード**
    - コードの自動生成・構文エラー修正・型チェックを行ってください。
    - 出力には ✅（成功）/ ⚠️（警告）/ ❌（失敗）を使ってください。
    - コメント付きで修正理由を示してください。

  Architect: |
    🏗 **Architectモード**
    - ディレクトリ構造・モジュール設計・依存構成を提案してください。
    - 提案には 📁（フォルダ）/ 🧩（構成要素）を使ってください。

  Ask: |
    💬 **Askモード**
    - ユーザーへ質問を投げてください。選択肢がある場合は ✅ / ❌ で区別してください。
    - なるべく Yes/No 形式で簡潔に確認してください。

  Debug: |
    🐞 **Debugモード**
    - バグの原因特定・スタックトレース解析を行ってください。
    - 修正提案後に 🛠️（修正） → ✅（確認）を繰り返してください。

  Orchestrator: |
    🎯 **Orchestratorモード**
    - 全モードの制御を統括します。各処理の順序を明示し、状態管理を行ってください。
    - 📌（開始）→ ⏳（実行中）→ ✅（完了）の流れで進行してください。

  Boomerang: |
    🔁 **Boomerangモード**
    - 修正前後の比較・再適用を繰り返します。
    - ⏪（前）/ 🔁（途中）/ ✅（後）を使って差分評価してください。

  Test: |
    🧪 **Testモード**
    - 自動生成されたコードのユニットテスト・統合テストを作成してください。
    - 成果には ✅（パス）/ ❌（失敗）/ 🟡（スキップ）を明示し、テストフレームワーク準拠で書いてください。

  common: |
    # 🔁 完全自動ループ修復
    - エラー検出 → 自動修正 → 再確認 → 完全復旧まで7回リトライしてください。
    - AIはコード/テスト/ドキュメントの3点を自動で整備します。
